/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: base/v1/service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from './base';
import * as dependency_2 from './../../validate/validate';
import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export namespace base.v1 {
  export class HealthRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
      }
    }
    static fromObject(data: {}): HealthRequest {
      const message = new HealthRequest({});
      return message;
    }
    toObject() {
      const data: {} = {};
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HealthRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new HealthRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HealthRequest {
      return HealthRequest.deserialize(bytes);
    }
  }
  export class HealthResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            status?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('status' in data && data.status != undefined) {
          this.status = data.status;
        }
      }
    }
    get status() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set status(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { status?: string }): HealthResponse {
      const message = new HealthResponse({});
      if (data.status != null) {
        message.status = data.status;
      }
      return message;
    }
    toObject() {
      const data: {
        status?: string;
      } = {};
      if (this.status != null) {
        data.status = this.status;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.status.length) writer.writeString(1, this.status);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HealthResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new HealthResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.status = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HealthResponse {
      return HealthResponse.deserialize(bytes);
    }
  }
  export class PermissionCheckRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: PermissionCheckRequestMetadata;
            entity?: dependency_1.base.v1.Entity;
            permission?: string;
            subject?: dependency_1.base.v1.Subject;
            context?: dependency_1.base.v1.Context;
            arguments?: dependency_1.base.v1.Argument[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [7],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('entity' in data && data.entity != undefined) {
          this.entity = data.entity;
        }
        if ('permission' in data && data.permission != undefined) {
          this.permission = data.permission;
        }
        if ('subject' in data && data.subject != undefined) {
          this.subject = data.subject;
        }
        if ('context' in data && data.context != undefined) {
          this.context = data.context;
        }
        if ('arguments' in data && data.arguments != undefined) {
          this.arguments = data.arguments;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        PermissionCheckRequestMetadata,
        2,
      ) as PermissionCheckRequestMetadata;
    }
    set metadata(value: PermissionCheckRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get entity() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Entity,
        3,
      ) as dependency_1.base.v1.Entity;
    }
    set entity(value: dependency_1.base.v1.Entity) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_entity() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get permission() {
      return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
    }
    set permission(value: string) {
      pb_1.Message.setField(this, 4, value);
    }
    get subject() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Subject,
        5,
      ) as dependency_1.base.v1.Subject;
    }
    set subject(value: dependency_1.base.v1.Subject) {
      pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_subject() {
      return pb_1.Message.getField(this, 5) != null;
    }
    get context() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Context,
        6,
      ) as dependency_1.base.v1.Context;
    }
    set context(value: dependency_1.base.v1.Context) {
      pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_context() {
      return pb_1.Message.getField(this, 6) != null;
    }
    get arguments() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.base.v1.Argument,
        7,
      ) as dependency_1.base.v1.Argument[];
    }
    set arguments(value: dependency_1.base.v1.Argument[]) {
      pb_1.Message.setRepeatedWrapperField(this, 7, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof PermissionCheckRequestMetadata.prototype.toObject
      >;
      entity?: ReturnType<
        typeof dependency_1.base.v1.Entity.prototype.toObject
      >;
      permission?: string;
      subject?: ReturnType<
        typeof dependency_1.base.v1.Subject.prototype.toObject
      >;
      context?: ReturnType<
        typeof dependency_1.base.v1.Context.prototype.toObject
      >;
      arguments?: ReturnType<
        typeof dependency_1.base.v1.Argument.prototype.toObject
      >[];
    }): PermissionCheckRequest {
      const message = new PermissionCheckRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = PermissionCheckRequestMetadata.fromObject(
          data.metadata,
        );
      }
      if (data.entity != null) {
        message.entity = dependency_1.base.v1.Entity.fromObject(data.entity);
      }
      if (data.permission != null) {
        message.permission = data.permission;
      }
      if (data.subject != null) {
        message.subject = dependency_1.base.v1.Subject.fromObject(data.subject);
      }
      if (data.context != null) {
        message.context = dependency_1.base.v1.Context.fromObject(data.context);
      }
      if (data.arguments != null) {
        message.arguments = data.arguments.map((item) =>
          dependency_1.base.v1.Argument.fromObject(item),
        );
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof PermissionCheckRequestMetadata.prototype.toObject
        >;
        entity?: ReturnType<
          typeof dependency_1.base.v1.Entity.prototype.toObject
        >;
        permission?: string;
        subject?: ReturnType<
          typeof dependency_1.base.v1.Subject.prototype.toObject
        >;
        context?: ReturnType<
          typeof dependency_1.base.v1.Context.prototype.toObject
        >;
        arguments?: ReturnType<
          typeof dependency_1.base.v1.Argument.prototype.toObject
        >[];
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.entity != null) {
        data.entity = this.entity.toObject();
      }
      if (this.permission != null) {
        data.permission = this.permission;
      }
      if (this.subject != null) {
        data.subject = this.subject.toObject();
      }
      if (this.context != null) {
        data.context = this.context.toObject();
      }
      if (this.arguments != null) {
        data.arguments = this.arguments.map(
          (item: dependency_1.base.v1.Argument) => item.toObject(),
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (this.has_entity)
        writer.writeMessage(3, this.entity, () =>
          this.entity.serialize(writer),
        );
      if (this.permission.length) writer.writeString(4, this.permission);
      if (this.has_subject)
        writer.writeMessage(5, this.subject, () =>
          this.subject.serialize(writer),
        );
      if (this.has_context)
        writer.writeMessage(6, this.context, () =>
          this.context.serialize(writer),
        );
      if (this.arguments.length)
        writer.writeRepeatedMessage(
          7,
          this.arguments,
          (item: dependency_1.base.v1.Argument) => item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionCheckRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionCheckRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  PermissionCheckRequestMetadata.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(
              message.entity,
              () =>
                (message.entity =
                  dependency_1.base.v1.Entity.deserialize(reader)),
            );
            break;
          case 4:
            message.permission = reader.readString();
            break;
          case 5:
            reader.readMessage(
              message.subject,
              () =>
                (message.subject =
                  dependency_1.base.v1.Subject.deserialize(reader)),
            );
            break;
          case 6:
            reader.readMessage(
              message.context,
              () =>
                (message.context =
                  dependency_1.base.v1.Context.deserialize(reader)),
            );
            break;
          case 7:
            reader.readMessage(message.arguments, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                7,
                dependency_1.base.v1.Argument.deserialize(reader),
                dependency_1.base.v1.Argument,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PermissionCheckRequest {
      return PermissionCheckRequest.deserialize(bytes);
    }
  }
  export class PermissionCheckRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
            snap_token?: string;
            depth?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
        if ('depth' in data && data.depth != undefined) {
          this.depth = data.depth;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get depth() {
      return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set depth(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      schema_version?: string;
      snap_token?: string;
      depth?: number;
    }): PermissionCheckRequestMetadata {
      const message = new PermissionCheckRequestMetadata({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      if (data.depth != null) {
        message.depth = data.depth;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
        snap_token?: string;
        depth?: number;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      if (this.depth != null) {
        data.depth = this.depth;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (this.snap_token.length) writer.writeString(2, this.snap_token);
      if (this.depth != 0) writer.writeInt32(3, this.depth);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionCheckRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionCheckRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          case 2:
            message.snap_token = reader.readString();
            break;
          case 3:
            message.depth = reader.readInt32();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionCheckRequestMetadata {
      return PermissionCheckRequestMetadata.deserialize(bytes);
    }
  }
  export class PermissionCheckResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            can?: dependency_1.base.v1.CheckResult;
            metadata?: PermissionCheckResponseMetadata;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('can' in data && data.can != undefined) {
          this.can = data.can;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
      }
    }
    get can() {
      return pb_1.Message.getFieldWithDefault(
        this,
        1,
        dependency_1.base.v1.CheckResult.CHECK_RESULT_UNSPECIFIED,
      ) as dependency_1.base.v1.CheckResult;
    }
    set can(value: dependency_1.base.v1.CheckResult) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        PermissionCheckResponseMetadata,
        2,
      ) as PermissionCheckResponseMetadata;
    }
    set metadata(value: PermissionCheckResponseMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
      can?: dependency_1.base.v1.CheckResult;
      metadata?: ReturnType<
        typeof PermissionCheckResponseMetadata.prototype.toObject
      >;
    }): PermissionCheckResponse {
      const message = new PermissionCheckResponse({});
      if (data.can != null) {
        message.can = data.can;
      }
      if (data.metadata != null) {
        message.metadata = PermissionCheckResponseMetadata.fromObject(
          data.metadata,
        );
      }
      return message;
    }
    toObject() {
      const data: {
        can?: dependency_1.base.v1.CheckResult;
        metadata?: ReturnType<
          typeof PermissionCheckResponseMetadata.prototype.toObject
        >;
      } = {};
      if (this.can != null) {
        data.can = this.can;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.can != dependency_1.base.v1.CheckResult.CHECK_RESULT_UNSPECIFIED)
        writer.writeEnum(1, this.can);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionCheckResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionCheckResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.can = reader.readEnum();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  PermissionCheckResponseMetadata.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PermissionCheckResponse {
      return PermissionCheckResponse.deserialize(bytes);
    }
  }
  export class PermissionCheckResponseMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            check_count?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('check_count' in data && data.check_count != undefined) {
          this.check_count = data.check_count;
        }
      }
    }
    get check_count() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set check_count(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      check_count?: number;
    }): PermissionCheckResponseMetadata {
      const message = new PermissionCheckResponseMetadata({});
      if (data.check_count != null) {
        message.check_count = data.check_count;
      }
      return message;
    }
    toObject() {
      const data: {
        check_count?: number;
      } = {};
      if (this.check_count != null) {
        data.check_count = this.check_count;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.check_count != 0) writer.writeInt32(1, this.check_count);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionCheckResponseMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionCheckResponseMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.check_count = reader.readInt32();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionCheckResponseMetadata {
      return PermissionCheckResponseMetadata.deserialize(bytes);
    }
  }
  export class PermissionExpandRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: PermissionExpandRequestMetadata;
            entity?: dependency_1.base.v1.Entity;
            permission?: string;
            context?: dependency_1.base.v1.Context;
            arguments?: dependency_1.base.v1.Argument[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [6],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('entity' in data && data.entity != undefined) {
          this.entity = data.entity;
        }
        if ('permission' in data && data.permission != undefined) {
          this.permission = data.permission;
        }
        if ('context' in data && data.context != undefined) {
          this.context = data.context;
        }
        if ('arguments' in data && data.arguments != undefined) {
          this.arguments = data.arguments;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        PermissionExpandRequestMetadata,
        2,
      ) as PermissionExpandRequestMetadata;
    }
    set metadata(value: PermissionExpandRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get entity() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Entity,
        3,
      ) as dependency_1.base.v1.Entity;
    }
    set entity(value: dependency_1.base.v1.Entity) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_entity() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get permission() {
      return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
    }
    set permission(value: string) {
      pb_1.Message.setField(this, 4, value);
    }
    get context() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Context,
        5,
      ) as dependency_1.base.v1.Context;
    }
    set context(value: dependency_1.base.v1.Context) {
      pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_context() {
      return pb_1.Message.getField(this, 5) != null;
    }
    get arguments() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.base.v1.Argument,
        6,
      ) as dependency_1.base.v1.Argument[];
    }
    set arguments(value: dependency_1.base.v1.Argument[]) {
      pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof PermissionExpandRequestMetadata.prototype.toObject
      >;
      entity?: ReturnType<
        typeof dependency_1.base.v1.Entity.prototype.toObject
      >;
      permission?: string;
      context?: ReturnType<
        typeof dependency_1.base.v1.Context.prototype.toObject
      >;
      arguments?: ReturnType<
        typeof dependency_1.base.v1.Argument.prototype.toObject
      >[];
    }): PermissionExpandRequest {
      const message = new PermissionExpandRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = PermissionExpandRequestMetadata.fromObject(
          data.metadata,
        );
      }
      if (data.entity != null) {
        message.entity = dependency_1.base.v1.Entity.fromObject(data.entity);
      }
      if (data.permission != null) {
        message.permission = data.permission;
      }
      if (data.context != null) {
        message.context = dependency_1.base.v1.Context.fromObject(data.context);
      }
      if (data.arguments != null) {
        message.arguments = data.arguments.map((item) =>
          dependency_1.base.v1.Argument.fromObject(item),
        );
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof PermissionExpandRequestMetadata.prototype.toObject
        >;
        entity?: ReturnType<
          typeof dependency_1.base.v1.Entity.prototype.toObject
        >;
        permission?: string;
        context?: ReturnType<
          typeof dependency_1.base.v1.Context.prototype.toObject
        >;
        arguments?: ReturnType<
          typeof dependency_1.base.v1.Argument.prototype.toObject
        >[];
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.entity != null) {
        data.entity = this.entity.toObject();
      }
      if (this.permission != null) {
        data.permission = this.permission;
      }
      if (this.context != null) {
        data.context = this.context.toObject();
      }
      if (this.arguments != null) {
        data.arguments = this.arguments.map(
          (item: dependency_1.base.v1.Argument) => item.toObject(),
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (this.has_entity)
        writer.writeMessage(3, this.entity, () =>
          this.entity.serialize(writer),
        );
      if (this.permission.length) writer.writeString(4, this.permission);
      if (this.has_context)
        writer.writeMessage(5, this.context, () =>
          this.context.serialize(writer),
        );
      if (this.arguments.length)
        writer.writeRepeatedMessage(
          6,
          this.arguments,
          (item: dependency_1.base.v1.Argument) => item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionExpandRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionExpandRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  PermissionExpandRequestMetadata.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(
              message.entity,
              () =>
                (message.entity =
                  dependency_1.base.v1.Entity.deserialize(reader)),
            );
            break;
          case 4:
            message.permission = reader.readString();
            break;
          case 5:
            reader.readMessage(
              message.context,
              () =>
                (message.context =
                  dependency_1.base.v1.Context.deserialize(reader)),
            );
            break;
          case 6:
            reader.readMessage(message.arguments, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                6,
                dependency_1.base.v1.Argument.deserialize(reader),
                dependency_1.base.v1.Argument,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PermissionExpandRequest {
      return PermissionExpandRequest.deserialize(bytes);
    }
  }
  export class PermissionExpandRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
            snap_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      schema_version?: string;
      snap_token?: string;
    }): PermissionExpandRequestMetadata {
      const message = new PermissionExpandRequestMetadata({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
        snap_token?: string;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (this.snap_token.length) writer.writeString(2, this.snap_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionExpandRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionExpandRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          case 2:
            message.snap_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionExpandRequestMetadata {
      return PermissionExpandRequestMetadata.deserialize(bytes);
    }
  }
  export class PermissionExpandResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tree?: dependency_1.base.v1.Expand;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tree' in data && data.tree != undefined) {
          this.tree = data.tree;
        }
      }
    }
    get tree() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Expand,
        1,
      ) as dependency_1.base.v1.Expand;
    }
    set tree(value: dependency_1.base.v1.Expand) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_tree() {
      return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
      tree?: ReturnType<typeof dependency_1.base.v1.Expand.prototype.toObject>;
    }): PermissionExpandResponse {
      const message = new PermissionExpandResponse({});
      if (data.tree != null) {
        message.tree = dependency_1.base.v1.Expand.fromObject(data.tree);
      }
      return message;
    }
    toObject() {
      const data: {
        tree?: ReturnType<
          typeof dependency_1.base.v1.Expand.prototype.toObject
        >;
      } = {};
      if (this.tree != null) {
        data.tree = this.tree.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_tree)
        writer.writeMessage(1, this.tree, () => this.tree.serialize(writer));
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionExpandResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionExpandResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.tree,
              () =>
                (message.tree =
                  dependency_1.base.v1.Expand.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PermissionExpandResponse {
      return PermissionExpandResponse.deserialize(bytes);
    }
  }
  export class PermissionLookupEntityRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: PermissionLookupEntityRequestMetadata;
            entity_type?: string;
            permission?: string;
            subject?: dependency_1.base.v1.Subject;
            context?: dependency_1.base.v1.Context;
            page_size?: number;
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('entity_type' in data && data.entity_type != undefined) {
          this.entity_type = data.entity_type;
        }
        if ('permission' in data && data.permission != undefined) {
          this.permission = data.permission;
        }
        if ('subject' in data && data.subject != undefined) {
          this.subject = data.subject;
        }
        if ('context' in data && data.context != undefined) {
          this.context = data.context;
        }
        if ('page_size' in data && data.page_size != undefined) {
          this.page_size = data.page_size;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        PermissionLookupEntityRequestMetadata,
        2,
      ) as PermissionLookupEntityRequestMetadata;
    }
    set metadata(value: PermissionLookupEntityRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get entity_type() {
      return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
    }
    set entity_type(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    get permission() {
      return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
    }
    set permission(value: string) {
      pb_1.Message.setField(this, 4, value);
    }
    get subject() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Subject,
        5,
      ) as dependency_1.base.v1.Subject;
    }
    set subject(value: dependency_1.base.v1.Subject) {
      pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_subject() {
      return pb_1.Message.getField(this, 5) != null;
    }
    get context() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Context,
        6,
      ) as dependency_1.base.v1.Context;
    }
    set context(value: dependency_1.base.v1.Context) {
      pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_context() {
      return pb_1.Message.getField(this, 6) != null;
    }
    get page_size() {
      return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set page_size(value: number) {
      pb_1.Message.setField(this, 7, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 8, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof PermissionLookupEntityRequestMetadata.prototype.toObject
      >;
      entity_type?: string;
      permission?: string;
      subject?: ReturnType<
        typeof dependency_1.base.v1.Subject.prototype.toObject
      >;
      context?: ReturnType<
        typeof dependency_1.base.v1.Context.prototype.toObject
      >;
      page_size?: number;
      continuous_token?: string;
    }): PermissionLookupEntityRequest {
      const message = new PermissionLookupEntityRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = PermissionLookupEntityRequestMetadata.fromObject(
          data.metadata,
        );
      }
      if (data.entity_type != null) {
        message.entity_type = data.entity_type;
      }
      if (data.permission != null) {
        message.permission = data.permission;
      }
      if (data.subject != null) {
        message.subject = dependency_1.base.v1.Subject.fromObject(data.subject);
      }
      if (data.context != null) {
        message.context = dependency_1.base.v1.Context.fromObject(data.context);
      }
      if (data.page_size != null) {
        message.page_size = data.page_size;
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof PermissionLookupEntityRequestMetadata.prototype.toObject
        >;
        entity_type?: string;
        permission?: string;
        subject?: ReturnType<
          typeof dependency_1.base.v1.Subject.prototype.toObject
        >;
        context?: ReturnType<
          typeof dependency_1.base.v1.Context.prototype.toObject
        >;
        page_size?: number;
        continuous_token?: string;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.entity_type != null) {
        data.entity_type = this.entity_type;
      }
      if (this.permission != null) {
        data.permission = this.permission;
      }
      if (this.subject != null) {
        data.subject = this.subject.toObject();
      }
      if (this.context != null) {
        data.context = this.context.toObject();
      }
      if (this.page_size != null) {
        data.page_size = this.page_size;
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (this.entity_type.length) writer.writeString(3, this.entity_type);
      if (this.permission.length) writer.writeString(4, this.permission);
      if (this.has_subject)
        writer.writeMessage(5, this.subject, () =>
          this.subject.serialize(writer),
        );
      if (this.has_context)
        writer.writeMessage(6, this.context, () =>
          this.context.serialize(writer),
        );
      if (this.page_size != 0) writer.writeUint32(7, this.page_size);
      if (this.continuous_token.length)
        writer.writeString(8, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionLookupEntityRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionLookupEntityRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  PermissionLookupEntityRequestMetadata.deserialize(reader)),
            );
            break;
          case 3:
            message.entity_type = reader.readString();
            break;
          case 4:
            message.permission = reader.readString();
            break;
          case 5:
            reader.readMessage(
              message.subject,
              () =>
                (message.subject =
                  dependency_1.base.v1.Subject.deserialize(reader)),
            );
            break;
          case 6:
            reader.readMessage(
              message.context,
              () =>
                (message.context =
                  dependency_1.base.v1.Context.deserialize(reader)),
            );
            break;
          case 7:
            message.page_size = reader.readUint32();
            break;
          case 8:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PermissionLookupEntityRequest {
      return PermissionLookupEntityRequest.deserialize(bytes);
    }
  }
  export class PermissionLookupEntityRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
            snap_token?: string;
            depth?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
        if ('depth' in data && data.depth != undefined) {
          this.depth = data.depth;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get depth() {
      return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set depth(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      schema_version?: string;
      snap_token?: string;
      depth?: number;
    }): PermissionLookupEntityRequestMetadata {
      const message = new PermissionLookupEntityRequestMetadata({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      if (data.depth != null) {
        message.depth = data.depth;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
        snap_token?: string;
        depth?: number;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      if (this.depth != null) {
        data.depth = this.depth;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (this.snap_token.length) writer.writeString(2, this.snap_token);
      if (this.depth != 0) writer.writeInt32(3, this.depth);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionLookupEntityRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionLookupEntityRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          case 2:
            message.snap_token = reader.readString();
            break;
          case 3:
            message.depth = reader.readInt32();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionLookupEntityRequestMetadata {
      return PermissionLookupEntityRequestMetadata.deserialize(bytes);
    }
  }
  export class PermissionLookupEntityResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            entity_ids?: string[];
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('entity_ids' in data && data.entity_ids != undefined) {
          this.entity_ids = data.entity_ids;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get entity_ids() {
      return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set entity_ids(value: string[]) {
      pb_1.Message.setField(this, 1, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      entity_ids?: string[];
      continuous_token?: string;
    }): PermissionLookupEntityResponse {
      const message = new PermissionLookupEntityResponse({});
      if (data.entity_ids != null) {
        message.entity_ids = data.entity_ids;
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        entity_ids?: string[];
        continuous_token?: string;
      } = {};
      if (this.entity_ids != null) {
        data.entity_ids = this.entity_ids;
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.entity_ids.length)
        writer.writeRepeatedString(1, this.entity_ids);
      if (this.continuous_token.length)
        writer.writeString(2, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionLookupEntityResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionLookupEntityResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
            break;
          case 2:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionLookupEntityResponse {
      return PermissionLookupEntityResponse.deserialize(bytes);
    }
  }
  export class PermissionLookupEntityStreamResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            entity_id?: string;
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('entity_id' in data && data.entity_id != undefined) {
          this.entity_id = data.entity_id;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get entity_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set entity_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      entity_id?: string;
      continuous_token?: string;
    }): PermissionLookupEntityStreamResponse {
      const message = new PermissionLookupEntityStreamResponse({});
      if (data.entity_id != null) {
        message.entity_id = data.entity_id;
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        entity_id?: string;
        continuous_token?: string;
      } = {};
      if (this.entity_id != null) {
        data.entity_id = this.entity_id;
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.entity_id.length) writer.writeString(1, this.entity_id);
      if (this.continuous_token.length)
        writer.writeString(2, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionLookupEntityStreamResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionLookupEntityStreamResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.entity_id = reader.readString();
            break;
          case 2:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionLookupEntityStreamResponse {
      return PermissionLookupEntityStreamResponse.deserialize(bytes);
    }
  }
  export class PermissionEntityFilterRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: PermissionEntityFilterRequestMetadata;
            entity_reference?: dependency_1.base.v1.RelationReference;
            subject?: dependency_1.base.v1.Subject;
            context?: dependency_1.base.v1.Context;
            cursor?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('entity_reference' in data && data.entity_reference != undefined) {
          this.entity_reference = data.entity_reference;
        }
        if ('subject' in data && data.subject != undefined) {
          this.subject = data.subject;
        }
        if ('context' in data && data.context != undefined) {
          this.context = data.context;
        }
        if ('cursor' in data && data.cursor != undefined) {
          this.cursor = data.cursor;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        PermissionEntityFilterRequestMetadata,
        2,
      ) as PermissionEntityFilterRequestMetadata;
    }
    set metadata(value: PermissionEntityFilterRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get entity_reference() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.RelationReference,
        3,
      ) as dependency_1.base.v1.RelationReference;
    }
    set entity_reference(value: dependency_1.base.v1.RelationReference) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_entity_reference() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get subject() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Subject,
        4,
      ) as dependency_1.base.v1.Subject;
    }
    set subject(value: dependency_1.base.v1.Subject) {
      pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_subject() {
      return pb_1.Message.getField(this, 4) != null;
    }
    get context() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Context,
        5,
      ) as dependency_1.base.v1.Context;
    }
    set context(value: dependency_1.base.v1.Context) {
      pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_context() {
      return pb_1.Message.getField(this, 5) != null;
    }
    get cursor() {
      return pb_1.Message.getFieldWithDefault(this, 6, '') as string;
    }
    set cursor(value: string) {
      pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof PermissionEntityFilterRequestMetadata.prototype.toObject
      >;
      entity_reference?: ReturnType<
        typeof dependency_1.base.v1.RelationReference.prototype.toObject
      >;
      subject?: ReturnType<
        typeof dependency_1.base.v1.Subject.prototype.toObject
      >;
      context?: ReturnType<
        typeof dependency_1.base.v1.Context.prototype.toObject
      >;
      cursor?: string;
    }): PermissionEntityFilterRequest {
      const message = new PermissionEntityFilterRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = PermissionEntityFilterRequestMetadata.fromObject(
          data.metadata,
        );
      }
      if (data.entity_reference != null) {
        message.entity_reference =
          dependency_1.base.v1.RelationReference.fromObject(
            data.entity_reference,
          );
      }
      if (data.subject != null) {
        message.subject = dependency_1.base.v1.Subject.fromObject(data.subject);
      }
      if (data.context != null) {
        message.context = dependency_1.base.v1.Context.fromObject(data.context);
      }
      if (data.cursor != null) {
        message.cursor = data.cursor;
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof PermissionEntityFilterRequestMetadata.prototype.toObject
        >;
        entity_reference?: ReturnType<
          typeof dependency_1.base.v1.RelationReference.prototype.toObject
        >;
        subject?: ReturnType<
          typeof dependency_1.base.v1.Subject.prototype.toObject
        >;
        context?: ReturnType<
          typeof dependency_1.base.v1.Context.prototype.toObject
        >;
        cursor?: string;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.entity_reference != null) {
        data.entity_reference = this.entity_reference.toObject();
      }
      if (this.subject != null) {
        data.subject = this.subject.toObject();
      }
      if (this.context != null) {
        data.context = this.context.toObject();
      }
      if (this.cursor != null) {
        data.cursor = this.cursor;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (this.has_entity_reference)
        writer.writeMessage(3, this.entity_reference, () =>
          this.entity_reference.serialize(writer),
        );
      if (this.has_subject)
        writer.writeMessage(4, this.subject, () =>
          this.subject.serialize(writer),
        );
      if (this.has_context)
        writer.writeMessage(5, this.context, () =>
          this.context.serialize(writer),
        );
      if (this.cursor.length) writer.writeString(6, this.cursor);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionEntityFilterRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionEntityFilterRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  PermissionEntityFilterRequestMetadata.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(
              message.entity_reference,
              () =>
                (message.entity_reference =
                  dependency_1.base.v1.RelationReference.deserialize(reader)),
            );
            break;
          case 4:
            reader.readMessage(
              message.subject,
              () =>
                (message.subject =
                  dependency_1.base.v1.Subject.deserialize(reader)),
            );
            break;
          case 5:
            reader.readMessage(
              message.context,
              () =>
                (message.context =
                  dependency_1.base.v1.Context.deserialize(reader)),
            );
            break;
          case 6:
            message.cursor = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PermissionEntityFilterRequest {
      return PermissionEntityFilterRequest.deserialize(bytes);
    }
  }
  export class PermissionEntityFilterRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
            snap_token?: string;
            depth?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
        if ('depth' in data && data.depth != undefined) {
          this.depth = data.depth;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get depth() {
      return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set depth(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      schema_version?: string;
      snap_token?: string;
      depth?: number;
    }): PermissionEntityFilterRequestMetadata {
      const message = new PermissionEntityFilterRequestMetadata({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      if (data.depth != null) {
        message.depth = data.depth;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
        snap_token?: string;
        depth?: number;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      if (this.depth != null) {
        data.depth = this.depth;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (this.snap_token.length) writer.writeString(2, this.snap_token);
      if (this.depth != 0) writer.writeInt32(3, this.depth);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionEntityFilterRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionEntityFilterRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          case 2:
            message.snap_token = reader.readString();
            break;
          case 3:
            message.depth = reader.readInt32();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionEntityFilterRequestMetadata {
      return PermissionEntityFilterRequestMetadata.deserialize(bytes);
    }
  }
  export class PermissionLookupSubjectRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: PermissionLookupSubjectRequestMetadata;
            entity?: dependency_1.base.v1.Entity;
            permission?: string;
            subject_reference?: dependency_1.base.v1.RelationReference;
            context?: dependency_1.base.v1.Context;
            page_size?: number;
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('entity' in data && data.entity != undefined) {
          this.entity = data.entity;
        }
        if ('permission' in data && data.permission != undefined) {
          this.permission = data.permission;
        }
        if (
          'subject_reference' in data &&
          data.subject_reference != undefined
        ) {
          this.subject_reference = data.subject_reference;
        }
        if ('context' in data && data.context != undefined) {
          this.context = data.context;
        }
        if ('page_size' in data && data.page_size != undefined) {
          this.page_size = data.page_size;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        PermissionLookupSubjectRequestMetadata,
        2,
      ) as PermissionLookupSubjectRequestMetadata;
    }
    set metadata(value: PermissionLookupSubjectRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get entity() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Entity,
        3,
      ) as dependency_1.base.v1.Entity;
    }
    set entity(value: dependency_1.base.v1.Entity) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_entity() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get permission() {
      return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
    }
    set permission(value: string) {
      pb_1.Message.setField(this, 4, value);
    }
    get subject_reference() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.RelationReference,
        5,
      ) as dependency_1.base.v1.RelationReference;
    }
    set subject_reference(value: dependency_1.base.v1.RelationReference) {
      pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_subject_reference() {
      return pb_1.Message.getField(this, 5) != null;
    }
    get context() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Context,
        6,
      ) as dependency_1.base.v1.Context;
    }
    set context(value: dependency_1.base.v1.Context) {
      pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_context() {
      return pb_1.Message.getField(this, 6) != null;
    }
    get page_size() {
      return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set page_size(value: number) {
      pb_1.Message.setField(this, 7, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 8, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof PermissionLookupSubjectRequestMetadata.prototype.toObject
      >;
      entity?: ReturnType<
        typeof dependency_1.base.v1.Entity.prototype.toObject
      >;
      permission?: string;
      subject_reference?: ReturnType<
        typeof dependency_1.base.v1.RelationReference.prototype.toObject
      >;
      context?: ReturnType<
        typeof dependency_1.base.v1.Context.prototype.toObject
      >;
      page_size?: number;
      continuous_token?: string;
    }): PermissionLookupSubjectRequest {
      const message = new PermissionLookupSubjectRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = PermissionLookupSubjectRequestMetadata.fromObject(
          data.metadata,
        );
      }
      if (data.entity != null) {
        message.entity = dependency_1.base.v1.Entity.fromObject(data.entity);
      }
      if (data.permission != null) {
        message.permission = data.permission;
      }
      if (data.subject_reference != null) {
        message.subject_reference =
          dependency_1.base.v1.RelationReference.fromObject(
            data.subject_reference,
          );
      }
      if (data.context != null) {
        message.context = dependency_1.base.v1.Context.fromObject(data.context);
      }
      if (data.page_size != null) {
        message.page_size = data.page_size;
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof PermissionLookupSubjectRequestMetadata.prototype.toObject
        >;
        entity?: ReturnType<
          typeof dependency_1.base.v1.Entity.prototype.toObject
        >;
        permission?: string;
        subject_reference?: ReturnType<
          typeof dependency_1.base.v1.RelationReference.prototype.toObject
        >;
        context?: ReturnType<
          typeof dependency_1.base.v1.Context.prototype.toObject
        >;
        page_size?: number;
        continuous_token?: string;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.entity != null) {
        data.entity = this.entity.toObject();
      }
      if (this.permission != null) {
        data.permission = this.permission;
      }
      if (this.subject_reference != null) {
        data.subject_reference = this.subject_reference.toObject();
      }
      if (this.context != null) {
        data.context = this.context.toObject();
      }
      if (this.page_size != null) {
        data.page_size = this.page_size;
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (this.has_entity)
        writer.writeMessage(3, this.entity, () =>
          this.entity.serialize(writer),
        );
      if (this.permission.length) writer.writeString(4, this.permission);
      if (this.has_subject_reference)
        writer.writeMessage(5, this.subject_reference, () =>
          this.subject_reference.serialize(writer),
        );
      if (this.has_context)
        writer.writeMessage(6, this.context, () =>
          this.context.serialize(writer),
        );
      if (this.page_size != 0) writer.writeUint32(7, this.page_size);
      if (this.continuous_token.length)
        writer.writeString(8, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionLookupSubjectRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionLookupSubjectRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  PermissionLookupSubjectRequestMetadata.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(
              message.entity,
              () =>
                (message.entity =
                  dependency_1.base.v1.Entity.deserialize(reader)),
            );
            break;
          case 4:
            message.permission = reader.readString();
            break;
          case 5:
            reader.readMessage(
              message.subject_reference,
              () =>
                (message.subject_reference =
                  dependency_1.base.v1.RelationReference.deserialize(reader)),
            );
            break;
          case 6:
            reader.readMessage(
              message.context,
              () =>
                (message.context =
                  dependency_1.base.v1.Context.deserialize(reader)),
            );
            break;
          case 7:
            message.page_size = reader.readUint32();
            break;
          case 8:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionLookupSubjectRequest {
      return PermissionLookupSubjectRequest.deserialize(bytes);
    }
  }
  export class PermissionLookupSubjectRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
            snap_token?: string;
            depth?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
        if ('depth' in data && data.depth != undefined) {
          this.depth = data.depth;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get depth() {
      return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set depth(value: number) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      schema_version?: string;
      snap_token?: string;
      depth?: number;
    }): PermissionLookupSubjectRequestMetadata {
      const message = new PermissionLookupSubjectRequestMetadata({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      if (data.depth != null) {
        message.depth = data.depth;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
        snap_token?: string;
        depth?: number;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      if (this.depth != null) {
        data.depth = this.depth;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (this.snap_token.length) writer.writeString(2, this.snap_token);
      if (this.depth != 0) writer.writeInt32(3, this.depth);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionLookupSubjectRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionLookupSubjectRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          case 2:
            message.snap_token = reader.readString();
            break;
          case 3:
            message.depth = reader.readInt32();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionLookupSubjectRequestMetadata {
      return PermissionLookupSubjectRequestMetadata.deserialize(bytes);
    }
  }
  export class PermissionLookupSubjectResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            subject_ids?: string[];
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('subject_ids' in data && data.subject_ids != undefined) {
          this.subject_ids = data.subject_ids;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get subject_ids() {
      return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set subject_ids(value: string[]) {
      pb_1.Message.setField(this, 1, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      subject_ids?: string[];
      continuous_token?: string;
    }): PermissionLookupSubjectResponse {
      const message = new PermissionLookupSubjectResponse({});
      if (data.subject_ids != null) {
        message.subject_ids = data.subject_ids;
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        subject_ids?: string[];
        continuous_token?: string;
      } = {};
      if (this.subject_ids != null) {
        data.subject_ids = this.subject_ids;
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.subject_ids.length)
        writer.writeRepeatedString(1, this.subject_ids);
      if (this.continuous_token.length)
        writer.writeString(2, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionLookupSubjectResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionLookupSubjectResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
            break;
          case 2:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionLookupSubjectResponse {
      return PermissionLookupSubjectResponse.deserialize(bytes);
    }
  }
  export class PermissionSubjectPermissionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: PermissionSubjectPermissionRequestMetadata;
            entity?: dependency_1.base.v1.Entity;
            subject?: dependency_1.base.v1.Subject;
            context?: dependency_1.base.v1.Context;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('entity' in data && data.entity != undefined) {
          this.entity = data.entity;
        }
        if ('subject' in data && data.subject != undefined) {
          this.subject = data.subject;
        }
        if ('context' in data && data.context != undefined) {
          this.context = data.context;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        PermissionSubjectPermissionRequestMetadata,
        2,
      ) as PermissionSubjectPermissionRequestMetadata;
    }
    set metadata(value: PermissionSubjectPermissionRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get entity() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Entity,
        3,
      ) as dependency_1.base.v1.Entity;
    }
    set entity(value: dependency_1.base.v1.Entity) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_entity() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get subject() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Subject,
        4,
      ) as dependency_1.base.v1.Subject;
    }
    set subject(value: dependency_1.base.v1.Subject) {
      pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_subject() {
      return pb_1.Message.getField(this, 4) != null;
    }
    get context() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Context,
        5,
      ) as dependency_1.base.v1.Context;
    }
    set context(value: dependency_1.base.v1.Context) {
      pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_context() {
      return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof PermissionSubjectPermissionRequestMetadata.prototype.toObject
      >;
      entity?: ReturnType<
        typeof dependency_1.base.v1.Entity.prototype.toObject
      >;
      subject?: ReturnType<
        typeof dependency_1.base.v1.Subject.prototype.toObject
      >;
      context?: ReturnType<
        typeof dependency_1.base.v1.Context.prototype.toObject
      >;
    }): PermissionSubjectPermissionRequest {
      const message = new PermissionSubjectPermissionRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata =
          PermissionSubjectPermissionRequestMetadata.fromObject(data.metadata);
      }
      if (data.entity != null) {
        message.entity = dependency_1.base.v1.Entity.fromObject(data.entity);
      }
      if (data.subject != null) {
        message.subject = dependency_1.base.v1.Subject.fromObject(data.subject);
      }
      if (data.context != null) {
        message.context = dependency_1.base.v1.Context.fromObject(data.context);
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof PermissionSubjectPermissionRequestMetadata.prototype.toObject
        >;
        entity?: ReturnType<
          typeof dependency_1.base.v1.Entity.prototype.toObject
        >;
        subject?: ReturnType<
          typeof dependency_1.base.v1.Subject.prototype.toObject
        >;
        context?: ReturnType<
          typeof dependency_1.base.v1.Context.prototype.toObject
        >;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.entity != null) {
        data.entity = this.entity.toObject();
      }
      if (this.subject != null) {
        data.subject = this.subject.toObject();
      }
      if (this.context != null) {
        data.context = this.context.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (this.has_entity)
        writer.writeMessage(3, this.entity, () =>
          this.entity.serialize(writer),
        );
      if (this.has_subject)
        writer.writeMessage(4, this.subject, () =>
          this.subject.serialize(writer),
        );
      if (this.has_context)
        writer.writeMessage(5, this.context, () =>
          this.context.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionSubjectPermissionRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionSubjectPermissionRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  PermissionSubjectPermissionRequestMetadata.deserialize(
                    reader,
                  )),
            );
            break;
          case 3:
            reader.readMessage(
              message.entity,
              () =>
                (message.entity =
                  dependency_1.base.v1.Entity.deserialize(reader)),
            );
            break;
          case 4:
            reader.readMessage(
              message.subject,
              () =>
                (message.subject =
                  dependency_1.base.v1.Subject.deserialize(reader)),
            );
            break;
          case 5:
            reader.readMessage(
              message.context,
              () =>
                (message.context =
                  dependency_1.base.v1.Context.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionSubjectPermissionRequest {
      return PermissionSubjectPermissionRequest.deserialize(bytes);
    }
  }
  export class PermissionSubjectPermissionRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
            snap_token?: string;
            only_permission?: boolean;
            depth?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
        if ('only_permission' in data && data.only_permission != undefined) {
          this.only_permission = data.only_permission;
        }
        if ('depth' in data && data.depth != undefined) {
          this.depth = data.depth;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get only_permission() {
      return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set only_permission(value: boolean) {
      pb_1.Message.setField(this, 3, value);
    }
    get depth() {
      return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set depth(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
      schema_version?: string;
      snap_token?: string;
      only_permission?: boolean;
      depth?: number;
    }): PermissionSubjectPermissionRequestMetadata {
      const message = new PermissionSubjectPermissionRequestMetadata({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      if (data.only_permission != null) {
        message.only_permission = data.only_permission;
      }
      if (data.depth != null) {
        message.depth = data.depth;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
        snap_token?: string;
        only_permission?: boolean;
        depth?: number;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      if (this.only_permission != null) {
        data.only_permission = this.only_permission;
      }
      if (this.depth != null) {
        data.depth = this.depth;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (this.snap_token.length) writer.writeString(2, this.snap_token);
      if (this.only_permission != false)
        writer.writeBool(3, this.only_permission);
      if (this.depth != 0) writer.writeInt32(4, this.depth);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionSubjectPermissionRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionSubjectPermissionRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          case 2:
            message.snap_token = reader.readString();
            break;
          case 3:
            message.only_permission = reader.readBool();
            break;
          case 4:
            message.depth = reader.readInt32();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionSubjectPermissionRequestMetadata {
      return PermissionSubjectPermissionRequestMetadata.deserialize(bytes);
    }
  }
  export class PermissionSubjectPermissionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            results?: Map<string, dependency_1.base.v1.CheckResult>;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('results' in data && data.results != undefined) {
          this.results = data.results;
        }
      }
      if (!this.results) this.results = new Map();
    }
    get results() {
      return pb_1.Message.getField(this, 1) as any as Map<
        string,
        dependency_1.base.v1.CheckResult
      >;
    }
    set results(value: Map<string, dependency_1.base.v1.CheckResult>) {
      pb_1.Message.setField(this, 1, value as any);
    }
    static fromObject(data: {
      results?: {
        [key: string]: dependency_1.base.v1.CheckResult;
      };
    }): PermissionSubjectPermissionResponse {
      const message = new PermissionSubjectPermissionResponse({});
      if (typeof data.results == 'object') {
        message.results = new Map(Object.entries(data.results));
      }
      return message;
    }
    toObject() {
      const data: {
        results?: {
          [key: string]: dependency_1.base.v1.CheckResult;
        };
      } = {};
      if (this.results != null) {
        data.results = Object.fromEntries(this.results);
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      for (const [key, value] of this.results) {
        writer.writeMessage(1, this.results, () => {
          writer.writeString(1, key);
          writer.writeEnum(2, value);
        });
      }
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): PermissionSubjectPermissionResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new PermissionSubjectPermissionResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message, () =>
              pb_1.Map.deserializeBinary(
                message.results as any,
                reader,
                reader.readString,
                reader.readEnum,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): PermissionSubjectPermissionResponse {
      return PermissionSubjectPermissionResponse.deserialize(bytes);
    }
  }
  export class WatchRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            snap_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      snap_token?: string;
    }): WatchRequest {
      const message = new WatchRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        snap_token?: string;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.snap_token.length) writer.writeString(2, this.snap_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WatchRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new WatchRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            message.snap_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WatchRequest {
      return WatchRequest.deserialize(bytes);
    }
  }
  export class WatchResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            changes?: dependency_1.base.v1.DataChanges;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('changes' in data && data.changes != undefined) {
          this.changes = data.changes;
        }
      }
    }
    get changes() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.DataChanges,
        1,
      ) as dependency_1.base.v1.DataChanges;
    }
    set changes(value: dependency_1.base.v1.DataChanges) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_changes() {
      return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
      changes?: ReturnType<
        typeof dependency_1.base.v1.DataChanges.prototype.toObject
      >;
    }): WatchResponse {
      const message = new WatchResponse({});
      if (data.changes != null) {
        message.changes = dependency_1.base.v1.DataChanges.fromObject(
          data.changes,
        );
      }
      return message;
    }
    toObject() {
      const data: {
        changes?: ReturnType<
          typeof dependency_1.base.v1.DataChanges.prototype.toObject
        >;
      } = {};
      if (this.changes != null) {
        data.changes = this.changes.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_changes)
        writer.writeMessage(1, this.changes, () =>
          this.changes.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WatchResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new WatchResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.changes,
              () =>
                (message.changes =
                  dependency_1.base.v1.DataChanges.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WatchResponse {
      return WatchResponse.deserialize(bytes);
    }
  }
  export class SchemaWriteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            schema?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('schema' in data && data.schema != undefined) {
          this.schema = data.schema;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get schema() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set schema(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      schema?: string;
    }): SchemaWriteRequest {
      const message = new SchemaWriteRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.schema != null) {
        message.schema = data.schema;
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        schema?: string;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.schema != null) {
        data.schema = this.schema;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.schema.length) writer.writeString(2, this.schema);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SchemaWriteRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaWriteRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            message.schema = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SchemaWriteRequest {
      return SchemaWriteRequest.deserialize(bytes);
    }
  }
  export class SchemaWriteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { schema_version?: string }): SchemaWriteResponse {
      const message = new SchemaWriteResponse({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SchemaWriteResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaWriteResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SchemaWriteResponse {
      return SchemaWriteResponse.deserialize(bytes);
    }
  }
  export class SchemaPartialWriteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: SchemaPartialWriteRequestMetadata;
            partials?: Map<string, dependency_1.base.v1.Partials>;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('partials' in data && data.partials != undefined) {
          this.partials = data.partials;
        }
      }
      if (!this.partials) this.partials = new Map();
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        SchemaPartialWriteRequestMetadata,
        2,
      ) as SchemaPartialWriteRequestMetadata;
    }
    set metadata(value: SchemaPartialWriteRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get partials() {
      return pb_1.Message.getField(this, 3) as any as Map<
        string,
        dependency_1.base.v1.Partials
      >;
    }
    set partials(value: Map<string, dependency_1.base.v1.Partials>) {
      pb_1.Message.setField(this, 3, value as any);
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof SchemaPartialWriteRequestMetadata.prototype.toObject
      >;
      partials?: {
        [key: string]: ReturnType<
          typeof dependency_1.base.v1.Partials.prototype.toObject
        >;
      };
    }): SchemaPartialWriteRequest {
      const message = new SchemaPartialWriteRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = SchemaPartialWriteRequestMetadata.fromObject(
          data.metadata,
        );
      }
      if (typeof data.partials == 'object') {
        message.partials = new Map(
          Object.entries(data.partials).map(([key, value]) => [
            key,
            dependency_1.base.v1.Partials.fromObject(value),
          ]),
        );
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof SchemaPartialWriteRequestMetadata.prototype.toObject
        >;
        partials?: {
          [key: string]: ReturnType<
            typeof dependency_1.base.v1.Partials.prototype.toObject
          >;
        };
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.partials != null) {
        data.partials = Object.fromEntries(
          Array.from(this.partials).map(([key, value]) => [
            key,
            value.toObject(),
          ]),
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      for (const [key, value] of this.partials) {
        writer.writeMessage(3, this.partials, () => {
          writer.writeString(1, key);
          writer.writeMessage(2, value, () => value.serialize(writer));
        });
      }
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SchemaPartialWriteRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaPartialWriteRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  SchemaPartialWriteRequestMetadata.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(message, () =>
              pb_1.Map.deserializeBinary(
                message.partials as any,
                reader,
                reader.readString,
                () => {
                  let value;
                  reader.readMessage(
                    message,
                    () =>
                      (value =
                        dependency_1.base.v1.Partials.deserialize(reader)),
                  );
                  return value;
                },
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SchemaPartialWriteRequest {
      return SchemaPartialWriteRequest.deserialize(bytes);
    }
  }
  export class SchemaPartialWriteRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      schema_version?: string;
    }): SchemaPartialWriteRequestMetadata {
      const message = new SchemaPartialWriteRequestMetadata({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SchemaPartialWriteRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaPartialWriteRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): SchemaPartialWriteRequestMetadata {
      return SchemaPartialWriteRequestMetadata.deserialize(bytes);
    }
  }
  export class SchemaPartialWriteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      schema_version?: string;
    }): SchemaPartialWriteResponse {
      const message = new SchemaPartialWriteResponse({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SchemaPartialWriteResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaPartialWriteResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SchemaPartialWriteResponse {
      return SchemaPartialWriteResponse.deserialize(bytes);
    }
  }
  export class SchemaReadRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: SchemaReadRequestMetadata;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        SchemaReadRequestMetadata,
        2,
      ) as SchemaReadRequestMetadata;
    }
    set metadata(value: SchemaReadRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof SchemaReadRequestMetadata.prototype.toObject
      >;
    }): SchemaReadRequest {
      const message = new SchemaReadRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = SchemaReadRequestMetadata.fromObject(data.metadata);
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof SchemaReadRequestMetadata.prototype.toObject
        >;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SchemaReadRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaReadRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  SchemaReadRequestMetadata.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SchemaReadRequest {
      return SchemaReadRequest.deserialize(bytes);
    }
  }
  export class SchemaReadRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      schema_version?: string;
    }): SchemaReadRequestMetadata {
      const message = new SchemaReadRequestMetadata({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SchemaReadRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaReadRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SchemaReadRequestMetadata {
      return SchemaReadRequestMetadata.deserialize(bytes);
    }
  }
  export class SchemaReadResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema?: dependency_1.base.v1.SchemaDefinition;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema' in data && data.schema != undefined) {
          this.schema = data.schema;
        }
      }
    }
    get schema() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.SchemaDefinition,
        1,
      ) as dependency_1.base.v1.SchemaDefinition;
    }
    set schema(value: dependency_1.base.v1.SchemaDefinition) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_schema() {
      return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
      schema?: ReturnType<
        typeof dependency_1.base.v1.SchemaDefinition.prototype.toObject
      >;
    }): SchemaReadResponse {
      const message = new SchemaReadResponse({});
      if (data.schema != null) {
        message.schema = dependency_1.base.v1.SchemaDefinition.fromObject(
          data.schema,
        );
      }
      return message;
    }
    toObject() {
      const data: {
        schema?: ReturnType<
          typeof dependency_1.base.v1.SchemaDefinition.prototype.toObject
        >;
      } = {};
      if (this.schema != null) {
        data.schema = this.schema.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_schema)
        writer.writeMessage(1, this.schema, () =>
          this.schema.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SchemaReadResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaReadResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.schema,
              () =>
                (message.schema =
                  dependency_1.base.v1.SchemaDefinition.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SchemaReadResponse {
      return SchemaReadResponse.deserialize(bytes);
    }
  }
  export class SchemaListRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            page_size?: number;
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('page_size' in data && data.page_size != undefined) {
          this.page_size = data.page_size;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get page_size() {
      return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set page_size(value: number) {
      pb_1.Message.setField(this, 2, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      page_size?: number;
      continuous_token?: string;
    }): SchemaListRequest {
      const message = new SchemaListRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.page_size != null) {
        message.page_size = data.page_size;
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        page_size?: number;
        continuous_token?: string;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.page_size != null) {
        data.page_size = this.page_size;
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.page_size != 0) writer.writeUint32(2, this.page_size);
      if (this.continuous_token.length)
        writer.writeString(3, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SchemaListRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaListRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            message.page_size = reader.readUint32();
            break;
          case 3:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SchemaListRequest {
      return SchemaListRequest.deserialize(bytes);
    }
  }
  export class SchemaListResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            head?: string;
            schemas?: SchemaList[];
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [2],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('head' in data && data.head != undefined) {
          this.head = data.head;
        }
        if ('schemas' in data && data.schemas != undefined) {
          this.schemas = data.schemas;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get head() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set head(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get schemas() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        SchemaList,
        2,
      ) as SchemaList[];
    }
    set schemas(value: SchemaList[]) {
      pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
      head?: string;
      schemas?: ReturnType<typeof SchemaList.prototype.toObject>[];
      continuous_token?: string;
    }): SchemaListResponse {
      const message = new SchemaListResponse({});
      if (data.head != null) {
        message.head = data.head;
      }
      if (data.schemas != null) {
        message.schemas = data.schemas.map((item) =>
          SchemaList.fromObject(item),
        );
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        head?: string;
        schemas?: ReturnType<typeof SchemaList.prototype.toObject>[];
        continuous_token?: string;
      } = {};
      if (this.head != null) {
        data.head = this.head;
      }
      if (this.schemas != null) {
        data.schemas = this.schemas.map((item: SchemaList) => item.toObject());
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.head.length) writer.writeString(1, this.head);
      if (this.schemas.length)
        writer.writeRepeatedMessage(2, this.schemas, (item: SchemaList) =>
          item.serialize(writer),
        );
      if (this.continuous_token.length)
        writer.writeString(3, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): SchemaListResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaListResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.head = reader.readString();
            break;
          case 2:
            reader.readMessage(message.schemas, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                2,
                SchemaList.deserialize(reader),
                SchemaList,
              ),
            );
            break;
          case 3:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SchemaListResponse {
      return SchemaListResponse.deserialize(bytes);
    }
  }
  export class SchemaList extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            version?: string;
            created_at?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('version' in data && data.version != undefined) {
          this.version = data.version;
        }
        if ('created_at' in data && data.created_at != undefined) {
          this.created_at = data.created_at;
        }
      }
    }
    get version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get created_at() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set created_at(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      version?: string;
      created_at?: string;
    }): SchemaList {
      const message = new SchemaList({});
      if (data.version != null) {
        message.version = data.version;
      }
      if (data.created_at != null) {
        message.created_at = data.created_at;
      }
      return message;
    }
    toObject() {
      const data: {
        version?: string;
        created_at?: string;
      } = {};
      if (this.version != null) {
        data.version = this.version;
      }
      if (this.created_at != null) {
        data.created_at = this.created_at;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.version.length) writer.writeString(1, this.version);
      if (this.created_at.length) writer.writeString(2, this.created_at);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SchemaList {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new SchemaList();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.version = reader.readString();
            break;
          case 2:
            message.created_at = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SchemaList {
      return SchemaList.deserialize(bytes);
    }
  }
  export class DataWriteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: DataWriteRequestMetadata;
            tuples?: dependency_1.base.v1.Tuple[];
            attributes?: dependency_1.base.v1.Attribute[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [3, 4],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('tuples' in data && data.tuples != undefined) {
          this.tuples = data.tuples;
        }
        if ('attributes' in data && data.attributes != undefined) {
          this.attributes = data.attributes;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        DataWriteRequestMetadata,
        2,
      ) as DataWriteRequestMetadata;
    }
    set metadata(value: DataWriteRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get tuples() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.base.v1.Tuple,
        3,
      ) as dependency_1.base.v1.Tuple[];
    }
    set tuples(value: dependency_1.base.v1.Tuple[]) {
      pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get attributes() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.base.v1.Attribute,
        4,
      ) as dependency_1.base.v1.Attribute[];
    }
    set attributes(value: dependency_1.base.v1.Attribute[]) {
      pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<typeof DataWriteRequestMetadata.prototype.toObject>;
      tuples?: ReturnType<
        typeof dependency_1.base.v1.Tuple.prototype.toObject
      >[];
      attributes?: ReturnType<
        typeof dependency_1.base.v1.Attribute.prototype.toObject
      >[];
    }): DataWriteRequest {
      const message = new DataWriteRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = DataWriteRequestMetadata.fromObject(data.metadata);
      }
      if (data.tuples != null) {
        message.tuples = data.tuples.map((item) =>
          dependency_1.base.v1.Tuple.fromObject(item),
        );
      }
      if (data.attributes != null) {
        message.attributes = data.attributes.map((item) =>
          dependency_1.base.v1.Attribute.fromObject(item),
        );
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof DataWriteRequestMetadata.prototype.toObject
        >;
        tuples?: ReturnType<
          typeof dependency_1.base.v1.Tuple.prototype.toObject
        >[];
        attributes?: ReturnType<
          typeof dependency_1.base.v1.Attribute.prototype.toObject
        >[];
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.tuples != null) {
        data.tuples = this.tuples.map((item: dependency_1.base.v1.Tuple) =>
          item.toObject(),
        );
      }
      if (this.attributes != null) {
        data.attributes = this.attributes.map(
          (item: dependency_1.base.v1.Attribute) => item.toObject(),
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (this.tuples.length)
        writer.writeRepeatedMessage(
          3,
          this.tuples,
          (item: dependency_1.base.v1.Tuple) => item.serialize(writer),
        );
      if (this.attributes.length)
        writer.writeRepeatedMessage(
          4,
          this.attributes,
          (item: dependency_1.base.v1.Attribute) => item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): DataWriteRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new DataWriteRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  DataWriteRequestMetadata.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(message.tuples, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                3,
                dependency_1.base.v1.Tuple.deserialize(reader),
                dependency_1.base.v1.Tuple,
              ),
            );
            break;
          case 4:
            reader.readMessage(message.attributes, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                4,
                dependency_1.base.v1.Attribute.deserialize(reader),
                dependency_1.base.v1.Attribute,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataWriteRequest {
      return DataWriteRequest.deserialize(bytes);
    }
  }
  export class DataWriteRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      schema_version?: string;
    }): DataWriteRequestMetadata {
      const message = new DataWriteRequestMetadata({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): DataWriteRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new DataWriteRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataWriteRequestMetadata {
      return DataWriteRequestMetadata.deserialize(bytes);
    }
  }
  export class DataWriteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            snap_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
      }
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { snap_token?: string }): DataWriteResponse {
      const message = new DataWriteResponse({});
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      return message;
    }
    toObject() {
      const data: {
        snap_token?: string;
      } = {};
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.snap_token.length) writer.writeString(1, this.snap_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): DataWriteResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new DataWriteResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.snap_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataWriteResponse {
      return DataWriteResponse.deserialize(bytes);
    }
  }
  export class RelationshipWriteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: RelationshipWriteRequestMetadata;
            tuples?: dependency_1.base.v1.Tuple[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [3],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('tuples' in data && data.tuples != undefined) {
          this.tuples = data.tuples;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        RelationshipWriteRequestMetadata,
        2,
      ) as RelationshipWriteRequestMetadata;
    }
    set metadata(value: RelationshipWriteRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get tuples() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.base.v1.Tuple,
        3,
      ) as dependency_1.base.v1.Tuple[];
    }
    set tuples(value: dependency_1.base.v1.Tuple[]) {
      pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof RelationshipWriteRequestMetadata.prototype.toObject
      >;
      tuples?: ReturnType<
        typeof dependency_1.base.v1.Tuple.prototype.toObject
      >[];
    }): RelationshipWriteRequest {
      const message = new RelationshipWriteRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = RelationshipWriteRequestMetadata.fromObject(
          data.metadata,
        );
      }
      if (data.tuples != null) {
        message.tuples = data.tuples.map((item) =>
          dependency_1.base.v1.Tuple.fromObject(item),
        );
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof RelationshipWriteRequestMetadata.prototype.toObject
        >;
        tuples?: ReturnType<
          typeof dependency_1.base.v1.Tuple.prototype.toObject
        >[];
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.tuples != null) {
        data.tuples = this.tuples.map((item: dependency_1.base.v1.Tuple) =>
          item.toObject(),
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (this.tuples.length)
        writer.writeRepeatedMessage(
          3,
          this.tuples,
          (item: dependency_1.base.v1.Tuple) => item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): RelationshipWriteRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new RelationshipWriteRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  RelationshipWriteRequestMetadata.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(message.tuples, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                3,
                dependency_1.base.v1.Tuple.deserialize(reader),
                dependency_1.base.v1.Tuple,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RelationshipWriteRequest {
      return RelationshipWriteRequest.deserialize(bytes);
    }
  }
  export class RelationshipWriteRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            schema_version?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('schema_version' in data && data.schema_version != undefined) {
          this.schema_version = data.schema_version;
        }
      }
    }
    get schema_version() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set schema_version(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      schema_version?: string;
    }): RelationshipWriteRequestMetadata {
      const message = new RelationshipWriteRequestMetadata({});
      if (data.schema_version != null) {
        message.schema_version = data.schema_version;
      }
      return message;
    }
    toObject() {
      const data: {
        schema_version?: string;
      } = {};
      if (this.schema_version != null) {
        data.schema_version = this.schema_version;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.schema_version.length)
        writer.writeString(1, this.schema_version);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): RelationshipWriteRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new RelationshipWriteRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.schema_version = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): RelationshipWriteRequestMetadata {
      return RelationshipWriteRequestMetadata.deserialize(bytes);
    }
  }
  export class RelationshipWriteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            snap_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
      }
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      snap_token?: string;
    }): RelationshipWriteResponse {
      const message = new RelationshipWriteResponse({});
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      return message;
    }
    toObject() {
      const data: {
        snap_token?: string;
      } = {};
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.snap_token.length) writer.writeString(1, this.snap_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): RelationshipWriteResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new RelationshipWriteResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.snap_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RelationshipWriteResponse {
      return RelationshipWriteResponse.deserialize(bytes);
    }
  }
  export class RelationshipReadRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: RelationshipReadRequestMetadata;
            filter?: dependency_1.base.v1.TupleFilter;
            page_size?: number;
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('filter' in data && data.filter != undefined) {
          this.filter = data.filter;
        }
        if ('page_size' in data && data.page_size != undefined) {
          this.page_size = data.page_size;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        RelationshipReadRequestMetadata,
        2,
      ) as RelationshipReadRequestMetadata;
    }
    set metadata(value: RelationshipReadRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get filter() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.TupleFilter,
        3,
      ) as dependency_1.base.v1.TupleFilter;
    }
    set filter(value: dependency_1.base.v1.TupleFilter) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_filter() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get page_size() {
      return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set page_size(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 5, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof RelationshipReadRequestMetadata.prototype.toObject
      >;
      filter?: ReturnType<
        typeof dependency_1.base.v1.TupleFilter.prototype.toObject
      >;
      page_size?: number;
      continuous_token?: string;
    }): RelationshipReadRequest {
      const message = new RelationshipReadRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = RelationshipReadRequestMetadata.fromObject(
          data.metadata,
        );
      }
      if (data.filter != null) {
        message.filter = dependency_1.base.v1.TupleFilter.fromObject(
          data.filter,
        );
      }
      if (data.page_size != null) {
        message.page_size = data.page_size;
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof RelationshipReadRequestMetadata.prototype.toObject
        >;
        filter?: ReturnType<
          typeof dependency_1.base.v1.TupleFilter.prototype.toObject
        >;
        page_size?: number;
        continuous_token?: string;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.filter != null) {
        data.filter = this.filter.toObject();
      }
      if (this.page_size != null) {
        data.page_size = this.page_size;
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (this.has_filter)
        writer.writeMessage(3, this.filter, () =>
          this.filter.serialize(writer),
        );
      if (this.page_size != 0) writer.writeUint32(4, this.page_size);
      if (this.continuous_token.length)
        writer.writeString(5, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): RelationshipReadRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new RelationshipReadRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  RelationshipReadRequestMetadata.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(
              message.filter,
              () =>
                (message.filter =
                  dependency_1.base.v1.TupleFilter.deserialize(reader)),
            );
            break;
          case 4:
            message.page_size = reader.readUint32();
            break;
          case 5:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RelationshipReadRequest {
      return RelationshipReadRequest.deserialize(bytes);
    }
  }
  export class RelationshipReadRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            snap_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
      }
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      snap_token?: string;
    }): RelationshipReadRequestMetadata {
      const message = new RelationshipReadRequestMetadata({});
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      return message;
    }
    toObject() {
      const data: {
        snap_token?: string;
      } = {};
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.snap_token.length) writer.writeString(1, this.snap_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): RelationshipReadRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new RelationshipReadRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.snap_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(
      bytes: Uint8Array,
    ): RelationshipReadRequestMetadata {
      return RelationshipReadRequestMetadata.deserialize(bytes);
    }
  }
  export class RelationshipReadResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tuples?: dependency_1.base.v1.Tuple[];
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tuples' in data && data.tuples != undefined) {
          this.tuples = data.tuples;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get tuples() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.base.v1.Tuple,
        1,
      ) as dependency_1.base.v1.Tuple[];
    }
    set tuples(value: dependency_1.base.v1.Tuple[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      tuples?: ReturnType<
        typeof dependency_1.base.v1.Tuple.prototype.toObject
      >[];
      continuous_token?: string;
    }): RelationshipReadResponse {
      const message = new RelationshipReadResponse({});
      if (data.tuples != null) {
        message.tuples = data.tuples.map((item) =>
          dependency_1.base.v1.Tuple.fromObject(item),
        );
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        tuples?: ReturnType<
          typeof dependency_1.base.v1.Tuple.prototype.toObject
        >[];
        continuous_token?: string;
      } = {};
      if (this.tuples != null) {
        data.tuples = this.tuples.map((item: dependency_1.base.v1.Tuple) =>
          item.toObject(),
        );
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tuples.length)
        writer.writeRepeatedMessage(
          1,
          this.tuples,
          (item: dependency_1.base.v1.Tuple) => item.serialize(writer),
        );
      if (this.continuous_token.length)
        writer.writeString(2, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): RelationshipReadResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new RelationshipReadResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.tuples, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                dependency_1.base.v1.Tuple.deserialize(reader),
                dependency_1.base.v1.Tuple,
              ),
            );
            break;
          case 2:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RelationshipReadResponse {
      return RelationshipReadResponse.deserialize(bytes);
    }
  }
  export class AttributeReadRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            metadata?: AttributeReadRequestMetadata;
            filter?: dependency_1.base.v1.AttributeFilter;
            page_size?: number;
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('metadata' in data && data.metadata != undefined) {
          this.metadata = data.metadata;
        }
        if ('filter' in data && data.filter != undefined) {
          this.filter = data.filter;
        }
        if ('page_size' in data && data.page_size != undefined) {
          this.page_size = data.page_size;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get metadata() {
      return pb_1.Message.getWrapperField(
        this,
        AttributeReadRequestMetadata,
        2,
      ) as AttributeReadRequestMetadata;
    }
    set metadata(value: AttributeReadRequestMetadata) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_metadata() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get filter() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.AttributeFilter,
        3,
      ) as dependency_1.base.v1.AttributeFilter;
    }
    set filter(value: dependency_1.base.v1.AttributeFilter) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_filter() {
      return pb_1.Message.getField(this, 3) != null;
    }
    get page_size() {
      return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set page_size(value: number) {
      pb_1.Message.setField(this, 4, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 5, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      metadata?: ReturnType<
        typeof AttributeReadRequestMetadata.prototype.toObject
      >;
      filter?: ReturnType<
        typeof dependency_1.base.v1.AttributeFilter.prototype.toObject
      >;
      page_size?: number;
      continuous_token?: string;
    }): AttributeReadRequest {
      const message = new AttributeReadRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.metadata != null) {
        message.metadata = AttributeReadRequestMetadata.fromObject(
          data.metadata,
        );
      }
      if (data.filter != null) {
        message.filter = dependency_1.base.v1.AttributeFilter.fromObject(
          data.filter,
        );
      }
      if (data.page_size != null) {
        message.page_size = data.page_size;
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        metadata?: ReturnType<
          typeof AttributeReadRequestMetadata.prototype.toObject
        >;
        filter?: ReturnType<
          typeof dependency_1.base.v1.AttributeFilter.prototype.toObject
        >;
        page_size?: number;
        continuous_token?: string;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.metadata != null) {
        data.metadata = this.metadata.toObject();
      }
      if (this.filter != null) {
        data.filter = this.filter.toObject();
      }
      if (this.page_size != null) {
        data.page_size = this.page_size;
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_metadata)
        writer.writeMessage(2, this.metadata, () =>
          this.metadata.serialize(writer),
        );
      if (this.has_filter)
        writer.writeMessage(3, this.filter, () =>
          this.filter.serialize(writer),
        );
      if (this.page_size != 0) writer.writeUint32(4, this.page_size);
      if (this.continuous_token.length)
        writer.writeString(5, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): AttributeReadRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new AttributeReadRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.metadata,
              () =>
                (message.metadata =
                  AttributeReadRequestMetadata.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(
              message.filter,
              () =>
                (message.filter =
                  dependency_1.base.v1.AttributeFilter.deserialize(reader)),
            );
            break;
          case 4:
            message.page_size = reader.readUint32();
            break;
          case 5:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AttributeReadRequest {
      return AttributeReadRequest.deserialize(bytes);
    }
  }
  export class AttributeReadRequestMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            snap_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
      }
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      snap_token?: string;
    }): AttributeReadRequestMetadata {
      const message = new AttributeReadRequestMetadata({});
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      return message;
    }
    toObject() {
      const data: {
        snap_token?: string;
      } = {};
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.snap_token.length) writer.writeString(1, this.snap_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): AttributeReadRequestMetadata {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new AttributeReadRequestMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.snap_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AttributeReadRequestMetadata {
      return AttributeReadRequestMetadata.deserialize(bytes);
    }
  }
  export class AttributeReadResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            attributes?: dependency_1.base.v1.Attribute[];
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('attributes' in data && data.attributes != undefined) {
          this.attributes = data.attributes;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get attributes() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.base.v1.Attribute,
        1,
      ) as dependency_1.base.v1.Attribute[];
    }
    set attributes(value: dependency_1.base.v1.Attribute[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      attributes?: ReturnType<
        typeof dependency_1.base.v1.Attribute.prototype.toObject
      >[];
      continuous_token?: string;
    }): AttributeReadResponse {
      const message = new AttributeReadResponse({});
      if (data.attributes != null) {
        message.attributes = data.attributes.map((item) =>
          dependency_1.base.v1.Attribute.fromObject(item),
        );
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        attributes?: ReturnType<
          typeof dependency_1.base.v1.Attribute.prototype.toObject
        >[];
        continuous_token?: string;
      } = {};
      if (this.attributes != null) {
        data.attributes = this.attributes.map(
          (item: dependency_1.base.v1.Attribute) => item.toObject(),
        );
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.attributes.length)
        writer.writeRepeatedMessage(
          1,
          this.attributes,
          (item: dependency_1.base.v1.Attribute) => item.serialize(writer),
        );
      if (this.continuous_token.length)
        writer.writeString(2, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): AttributeReadResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new AttributeReadResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.attributes, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                dependency_1.base.v1.Attribute.deserialize(reader),
                dependency_1.base.v1.Attribute,
              ),
            );
            break;
          case 2:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AttributeReadResponse {
      return AttributeReadResponse.deserialize(bytes);
    }
  }
  export class DataDeleteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            tuple_filter?: dependency_1.base.v1.TupleFilter;
            attribute_filter?: dependency_1.base.v1.AttributeFilter;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('tuple_filter' in data && data.tuple_filter != undefined) {
          this.tuple_filter = data.tuple_filter;
        }
        if ('attribute_filter' in data && data.attribute_filter != undefined) {
          this.attribute_filter = data.attribute_filter;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get tuple_filter() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.TupleFilter,
        2,
      ) as dependency_1.base.v1.TupleFilter;
    }
    set tuple_filter(value: dependency_1.base.v1.TupleFilter) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_tuple_filter() {
      return pb_1.Message.getField(this, 2) != null;
    }
    get attribute_filter() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.AttributeFilter,
        3,
      ) as dependency_1.base.v1.AttributeFilter;
    }
    set attribute_filter(value: dependency_1.base.v1.AttributeFilter) {
      pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_attribute_filter() {
      return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
      tenant_id?: string;
      tuple_filter?: ReturnType<
        typeof dependency_1.base.v1.TupleFilter.prototype.toObject
      >;
      attribute_filter?: ReturnType<
        typeof dependency_1.base.v1.AttributeFilter.prototype.toObject
      >;
    }): DataDeleteRequest {
      const message = new DataDeleteRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.tuple_filter != null) {
        message.tuple_filter = dependency_1.base.v1.TupleFilter.fromObject(
          data.tuple_filter,
        );
      }
      if (data.attribute_filter != null) {
        message.attribute_filter =
          dependency_1.base.v1.AttributeFilter.fromObject(
            data.attribute_filter,
          );
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        tuple_filter?: ReturnType<
          typeof dependency_1.base.v1.TupleFilter.prototype.toObject
        >;
        attribute_filter?: ReturnType<
          typeof dependency_1.base.v1.AttributeFilter.prototype.toObject
        >;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.tuple_filter != null) {
        data.tuple_filter = this.tuple_filter.toObject();
      }
      if (this.attribute_filter != null) {
        data.attribute_filter = this.attribute_filter.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_tuple_filter)
        writer.writeMessage(2, this.tuple_filter, () =>
          this.tuple_filter.serialize(writer),
        );
      if (this.has_attribute_filter)
        writer.writeMessage(3, this.attribute_filter, () =>
          this.attribute_filter.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): DataDeleteRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new DataDeleteRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.tuple_filter,
              () =>
                (message.tuple_filter =
                  dependency_1.base.v1.TupleFilter.deserialize(reader)),
            );
            break;
          case 3:
            reader.readMessage(
              message.attribute_filter,
              () =>
                (message.attribute_filter =
                  dependency_1.base.v1.AttributeFilter.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataDeleteRequest {
      return DataDeleteRequest.deserialize(bytes);
    }
  }
  export class DataDeleteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            snap_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
      }
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { snap_token?: string }): DataDeleteResponse {
      const message = new DataDeleteResponse({});
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      return message;
    }
    toObject() {
      const data: {
        snap_token?: string;
      } = {};
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.snap_token.length) writer.writeString(1, this.snap_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): DataDeleteResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new DataDeleteResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.snap_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataDeleteResponse {
      return DataDeleteResponse.deserialize(bytes);
    }
  }
  export class RelationshipDeleteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            filter?: dependency_1.base.v1.TupleFilter;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('filter' in data && data.filter != undefined) {
          this.filter = data.filter;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get filter() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.TupleFilter,
        2,
      ) as dependency_1.base.v1.TupleFilter;
    }
    set filter(value: dependency_1.base.v1.TupleFilter) {
      pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_filter() {
      return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
      tenant_id?: string;
      filter?: ReturnType<
        typeof dependency_1.base.v1.TupleFilter.prototype.toObject
      >;
    }): RelationshipDeleteRequest {
      const message = new RelationshipDeleteRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.filter != null) {
        message.filter = dependency_1.base.v1.TupleFilter.fromObject(
          data.filter,
        );
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        filter?: ReturnType<
          typeof dependency_1.base.v1.TupleFilter.prototype.toObject
        >;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.filter != null) {
        data.filter = this.filter.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.has_filter)
        writer.writeMessage(2, this.filter, () =>
          this.filter.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): RelationshipDeleteRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new RelationshipDeleteRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(
              message.filter,
              () =>
                (message.filter =
                  dependency_1.base.v1.TupleFilter.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RelationshipDeleteRequest {
      return RelationshipDeleteRequest.deserialize(bytes);
    }
  }
  export class RelationshipDeleteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            snap_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
      }
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
      snap_token?: string;
    }): RelationshipDeleteResponse {
      const message = new RelationshipDeleteResponse({});
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      return message;
    }
    toObject() {
      const data: {
        snap_token?: string;
      } = {};
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.snap_token.length) writer.writeString(1, this.snap_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): RelationshipDeleteResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new RelationshipDeleteResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.snap_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RelationshipDeleteResponse {
      return RelationshipDeleteResponse.deserialize(bytes);
    }
  }
  export class BundleRunRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            name?: string;
            arguments?: Map<string, string>;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('name' in data && data.name != undefined) {
          this.name = data.name;
        }
        if ('arguments' in data && data.arguments != undefined) {
          this.arguments = data.arguments;
        }
      }
      if (!this.arguments) this.arguments = new Map();
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get name() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get arguments() {
      return pb_1.Message.getField(this, 3) as any as Map<string, string>;
    }
    set arguments(value: Map<string, string>) {
      pb_1.Message.setField(this, 3, value as any);
    }
    static fromObject(data: {
      tenant_id?: string;
      name?: string;
      arguments?: {
        [key: string]: string;
      };
    }): BundleRunRequest {
      const message = new BundleRunRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.name != null) {
        message.name = data.name;
      }
      if (typeof data.arguments == 'object') {
        message.arguments = new Map(Object.entries(data.arguments));
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        name?: string;
        arguments?: {
          [key: string]: string;
        };
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.name != null) {
        data.name = this.name;
      }
      if (this.arguments != null) {
        data.arguments = Object.fromEntries(this.arguments);
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.name.length) writer.writeString(2, this.name);
      for (const [key, value] of this.arguments) {
        writer.writeMessage(3, this.arguments, () => {
          writer.writeString(1, key);
          writer.writeString(2, value);
        });
      }
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): BundleRunRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new BundleRunRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            message.name = reader.readString();
            break;
          case 3:
            reader.readMessage(message, () =>
              pb_1.Map.deserializeBinary(
                message.arguments as any,
                reader,
                reader.readString,
                reader.readString,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BundleRunRequest {
      return BundleRunRequest.deserialize(bytes);
    }
  }
  export class BundleRunResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            snap_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('snap_token' in data && data.snap_token != undefined) {
          this.snap_token = data.snap_token;
        }
      }
    }
    get snap_token() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set snap_token(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { snap_token?: string }): BundleRunResponse {
      const message = new BundleRunResponse({});
      if (data.snap_token != null) {
        message.snap_token = data.snap_token;
      }
      return message;
    }
    toObject() {
      const data: {
        snap_token?: string;
      } = {};
      if (this.snap_token != null) {
        data.snap_token = this.snap_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.snap_token.length) writer.writeString(1, this.snap_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): BundleRunResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new BundleRunResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.snap_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BundleRunResponse {
      return BundleRunResponse.deserialize(bytes);
    }
  }
  export class BundleWriteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            bundles?: dependency_1.base.v1.DataBundle[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [2],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('bundles' in data && data.bundles != undefined) {
          this.bundles = data.bundles;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get bundles() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.base.v1.DataBundle,
        2,
      ) as dependency_1.base.v1.DataBundle[];
    }
    set bundles(value: dependency_1.base.v1.DataBundle[]) {
      pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      bundles?: ReturnType<
        typeof dependency_1.base.v1.DataBundle.prototype.toObject
      >[];
    }): BundleWriteRequest {
      const message = new BundleWriteRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.bundles != null) {
        message.bundles = data.bundles.map((item) =>
          dependency_1.base.v1.DataBundle.fromObject(item),
        );
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        bundles?: ReturnType<
          typeof dependency_1.base.v1.DataBundle.prototype.toObject
        >[];
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.bundles != null) {
        data.bundles = this.bundles.map(
          (item: dependency_1.base.v1.DataBundle) => item.toObject(),
        );
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.bundles.length)
        writer.writeRepeatedMessage(
          2,
          this.bundles,
          (item: dependency_1.base.v1.DataBundle) => item.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): BundleWriteRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new BundleWriteRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            reader.readMessage(message.bundles, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                2,
                dependency_1.base.v1.DataBundle.deserialize(reader),
                dependency_1.base.v1.DataBundle,
              ),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BundleWriteRequest {
      return BundleWriteRequest.deserialize(bytes);
    }
  }
  export class BundleWriteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            names?: string[];
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('names' in data && data.names != undefined) {
          this.names = data.names;
        }
      }
    }
    get names() {
      return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set names(value: string[]) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { names?: string[] }): BundleWriteResponse {
      const message = new BundleWriteResponse({});
      if (data.names != null) {
        message.names = data.names;
      }
      return message;
    }
    toObject() {
      const data: {
        names?: string[];
      } = {};
      if (this.names != null) {
        data.names = this.names;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.names.length) writer.writeRepeatedString(1, this.names);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): BundleWriteResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new BundleWriteResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BundleWriteResponse {
      return BundleWriteResponse.deserialize(bytes);
    }
  }
  export class BundleReadRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            name?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('name' in data && data.name != undefined) {
          this.name = data.name;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get name() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      name?: string;
    }): BundleReadRequest {
      const message = new BundleReadRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.name != null) {
        message.name = data.name;
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        name?: string;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.name != null) {
        data.name = this.name;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.name.length) writer.writeString(2, this.name);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): BundleReadRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new BundleReadRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            message.name = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BundleReadRequest {
      return BundleReadRequest.deserialize(bytes);
    }
  }
  export class BundleReadResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            bundle?: dependency_1.base.v1.DataBundle;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('bundle' in data && data.bundle != undefined) {
          this.bundle = data.bundle;
        }
      }
    }
    get bundle() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.DataBundle,
        1,
      ) as dependency_1.base.v1.DataBundle;
    }
    set bundle(value: dependency_1.base.v1.DataBundle) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_bundle() {
      return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
      bundle?: ReturnType<
        typeof dependency_1.base.v1.DataBundle.prototype.toObject
      >;
    }): BundleReadResponse {
      const message = new BundleReadResponse({});
      if (data.bundle != null) {
        message.bundle = dependency_1.base.v1.DataBundle.fromObject(
          data.bundle,
        );
      }
      return message;
    }
    toObject() {
      const data: {
        bundle?: ReturnType<
          typeof dependency_1.base.v1.DataBundle.prototype.toObject
        >;
      } = {};
      if (this.bundle != null) {
        data.bundle = this.bundle.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_bundle)
        writer.writeMessage(1, this.bundle, () =>
          this.bundle.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): BundleReadResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new BundleReadResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.bundle,
              () =>
                (message.bundle =
                  dependency_1.base.v1.DataBundle.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BundleReadResponse {
      return BundleReadResponse.deserialize(bytes);
    }
  }
  export class BundleDeleteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant_id?: string;
            name?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant_id' in data && data.tenant_id != undefined) {
          this.tenant_id = data.tenant_id;
        }
        if ('name' in data && data.name != undefined) {
          this.name = data.name;
        }
      }
    }
    get tenant_id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set tenant_id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get name() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      tenant_id?: string;
      name?: string;
    }): BundleDeleteRequest {
      const message = new BundleDeleteRequest({});
      if (data.tenant_id != null) {
        message.tenant_id = data.tenant_id;
      }
      if (data.name != null) {
        message.name = data.name;
      }
      return message;
    }
    toObject() {
      const data: {
        tenant_id?: string;
        name?: string;
      } = {};
      if (this.tenant_id != null) {
        data.tenant_id = this.tenant_id;
      }
      if (this.name != null) {
        data.name = this.name;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenant_id.length) writer.writeString(1, this.tenant_id);
      if (this.name.length) writer.writeString(2, this.name);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): BundleDeleteRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new BundleDeleteRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.tenant_id = reader.readString();
            break;
          case 2:
            message.name = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BundleDeleteRequest {
      return BundleDeleteRequest.deserialize(bytes);
    }
  }
  export class BundleDeleteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            name?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('name' in data && data.name != undefined) {
          this.name = data.name;
        }
      }
    }
    get name() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { name?: string }): BundleDeleteResponse {
      const message = new BundleDeleteResponse({});
      if (data.name != null) {
        message.name = data.name;
      }
      return message;
    }
    toObject() {
      const data: {
        name?: string;
      } = {};
      if (this.name != null) {
        data.name = this.name;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.name.length) writer.writeString(1, this.name);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): BundleDeleteResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new BundleDeleteResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.name = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BundleDeleteResponse {
      return BundleDeleteResponse.deserialize(bytes);
    }
  }
  export class TenantCreateRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            id?: string;
            name?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('id' in data && data.id != undefined) {
          this.id = data.id;
        }
        if ('name' in data && data.name != undefined) {
          this.name = data.name;
        }
      }
    }
    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get name() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set name(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      id?: string;
      name?: string;
    }): TenantCreateRequest {
      const message = new TenantCreateRequest({});
      if (data.id != null) {
        message.id = data.id;
      }
      if (data.name != null) {
        message.name = data.name;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: string;
        name?: string;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      if (this.name != null) {
        data.name = this.name;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id.length) writer.writeString(1, this.id);
      if (this.name.length) writer.writeString(2, this.name);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): TenantCreateRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new TenantCreateRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readString();
            break;
          case 2:
            message.name = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TenantCreateRequest {
      return TenantCreateRequest.deserialize(bytes);
    }
  }
  export class TenantCreateResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant?: dependency_1.base.v1.Tenant;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant' in data && data.tenant != undefined) {
          this.tenant = data.tenant;
        }
      }
    }
    get tenant() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Tenant,
        1,
      ) as dependency_1.base.v1.Tenant;
    }
    set tenant(value: dependency_1.base.v1.Tenant) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_tenant() {
      return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
      tenant?: ReturnType<
        typeof dependency_1.base.v1.Tenant.prototype.toObject
      >;
    }): TenantCreateResponse {
      const message = new TenantCreateResponse({});
      if (data.tenant != null) {
        message.tenant = dependency_1.base.v1.Tenant.fromObject(data.tenant);
      }
      return message;
    }
    toObject() {
      const data: {
        tenant?: ReturnType<
          typeof dependency_1.base.v1.Tenant.prototype.toObject
        >;
      } = {};
      if (this.tenant != null) {
        data.tenant = this.tenant.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_tenant)
        writer.writeMessage(1, this.tenant, () =>
          this.tenant.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): TenantCreateResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new TenantCreateResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.tenant,
              () =>
                (message.tenant =
                  dependency_1.base.v1.Tenant.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TenantCreateResponse {
      return TenantCreateResponse.deserialize(bytes);
    }
  }
  export class TenantDeleteRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            id?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('id' in data && data.id != undefined) {
          this.id = data.id;
        }
      }
    }
    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }
    set id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { id?: string }): TenantDeleteRequest {
      const message = new TenantDeleteRequest({});
      if (data.id != null) {
        message.id = data.id;
      }
      return message;
    }
    toObject() {
      const data: {
        id?: string;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id.length) writer.writeString(1, this.id);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): TenantDeleteRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new TenantDeleteRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TenantDeleteRequest {
      return TenantDeleteRequest.deserialize(bytes);
    }
  }
  export class TenantDeleteResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenant?: dependency_1.base.v1.Tenant;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenant' in data && data.tenant != undefined) {
          this.tenant = data.tenant;
        }
      }
    }
    get tenant() {
      return pb_1.Message.getWrapperField(
        this,
        dependency_1.base.v1.Tenant,
        1,
      ) as dependency_1.base.v1.Tenant;
    }
    set tenant(value: dependency_1.base.v1.Tenant) {
      pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_tenant() {
      return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
      tenant?: ReturnType<
        typeof dependency_1.base.v1.Tenant.prototype.toObject
      >;
    }): TenantDeleteResponse {
      const message = new TenantDeleteResponse({});
      if (data.tenant != null) {
        message.tenant = dependency_1.base.v1.Tenant.fromObject(data.tenant);
      }
      return message;
    }
    toObject() {
      const data: {
        tenant?: ReturnType<
          typeof dependency_1.base.v1.Tenant.prototype.toObject
        >;
      } = {};
      if (this.tenant != null) {
        data.tenant = this.tenant.toObject();
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.has_tenant)
        writer.writeMessage(1, this.tenant, () =>
          this.tenant.serialize(writer),
        );
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): TenantDeleteResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new TenantDeleteResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(
              message.tenant,
              () =>
                (message.tenant =
                  dependency_1.base.v1.Tenant.deserialize(reader)),
            );
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TenantDeleteResponse {
      return TenantDeleteResponse.deserialize(bytes);
    }
  }
  export class TenantListRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            page_size?: number;
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('page_size' in data && data.page_size != undefined) {
          this.page_size = data.page_size;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get page_size() {
      return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set page_size(value: number) {
      pb_1.Message.setField(this, 1, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      page_size?: number;
      continuous_token?: string;
    }): TenantListRequest {
      const message = new TenantListRequest({});
      if (data.page_size != null) {
        message.page_size = data.page_size;
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        page_size?: number;
        continuous_token?: string;
      } = {};
      if (this.page_size != null) {
        data.page_size = this.page_size;
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.page_size != 0) writer.writeUint32(1, this.page_size);
      if (this.continuous_token.length)
        writer.writeString(2, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): TenantListRequest {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new TenantListRequest();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.page_size = reader.readUint32();
            break;
          case 2:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TenantListRequest {
      return TenantListRequest.deserialize(bytes);
    }
  }
  export class TenantListResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
      data?:
        | any[]
        | {
            tenants?: dependency_1.base.v1.Tenant[];
            continuous_token?: string;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [1],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('tenants' in data && data.tenants != undefined) {
          this.tenants = data.tenants;
        }
        if ('continuous_token' in data && data.continuous_token != undefined) {
          this.continuous_token = data.continuous_token;
        }
      }
    }
    get tenants() {
      return pb_1.Message.getRepeatedWrapperField(
        this,
        dependency_1.base.v1.Tenant,
        1,
      ) as dependency_1.base.v1.Tenant[];
    }
    set tenants(value: dependency_1.base.v1.Tenant[]) {
      pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get continuous_token() {
      return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
    }
    set continuous_token(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      tenants?: ReturnType<
        typeof dependency_1.base.v1.Tenant.prototype.toObject
      >[];
      continuous_token?: string;
    }): TenantListResponse {
      const message = new TenantListResponse({});
      if (data.tenants != null) {
        message.tenants = data.tenants.map((item) =>
          dependency_1.base.v1.Tenant.fromObject(item),
        );
      }
      if (data.continuous_token != null) {
        message.continuous_token = data.continuous_token;
      }
      return message;
    }
    toObject() {
      const data: {
        tenants?: ReturnType<
          typeof dependency_1.base.v1.Tenant.prototype.toObject
        >[];
        continuous_token?: string;
      } = {};
      if (this.tenants != null) {
        data.tenants = this.tenants.map((item: dependency_1.base.v1.Tenant) =>
          item.toObject(),
        );
      }
      if (this.continuous_token != null) {
        data.continuous_token = this.continuous_token;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.tenants.length)
        writer.writeRepeatedMessage(
          1,
          this.tenants,
          (item: dependency_1.base.v1.Tenant) => item.serialize(writer),
        );
      if (this.continuous_token.length)
        writer.writeString(2, this.continuous_token);
      if (!w) return writer.getResultBuffer();
    }
    static deserialize(
      bytes: Uint8Array | pb_1.BinaryReader,
    ): TenantListResponse {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new TenantListResponse();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            reader.readMessage(message.tenants, () =>
              pb_1.Message.addToRepeatedWrapperField(
                message,
                1,
                dependency_1.base.v1.Tenant.deserialize(reader),
                dependency_1.base.v1.Tenant,
              ),
            );
            break;
          case 2:
            message.continuous_token = reader.readString();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TenantListResponse {
      return TenantListResponse.deserialize(bytes);
    }
  }
  interface GrpcUnaryServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (
      message: P,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
  }
  interface GrpcStreamServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
  }
  interface GrpWritableServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      metadata: grpc_1.Metadata,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (
      options: grpc_1.CallOptions,
      callback: grpc_1.requestCallback<R>,
    ): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  }
  interface GrpcChunkServiceInterface<P, R> {
    (
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  }
  interface GrpcPromiseServiceInterface<P, R> {
    (
      message: P,
      metadata: grpc_1.Metadata,
      options?: grpc_1.CallOptions,
    ): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
  }
  export abstract class UnimplementedHealthService {
    static definition = {
      Check: {
        path: '/base.v1.Health/Check',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: HealthRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          HealthRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: HealthResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          HealthResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Check(
      call: grpc_1.ServerUnaryCall<HealthRequest, HealthResponse>,
      callback: grpc_1.sendUnaryData<HealthResponse>,
    ): void;
  }
  export class HealthClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedHealthService.definition,
    'Health',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    Check: GrpcUnaryServiceInterface<HealthRequest, HealthResponse> = (
      message: HealthRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<HealthResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<HealthResponse>,
      callback?: grpc_1.requestCallback<HealthResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Check(message, metadata, options, callback);
    };
  }
  export abstract class UnimplementedPermissionService {
    static definition = {
      Check: {
        path: '/base.v1.Permission/Check',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: PermissionCheckRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          PermissionCheckRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: PermissionCheckResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          PermissionCheckResponse.deserialize(new Uint8Array(bytes)),
      },
      Expand: {
        path: '/base.v1.Permission/Expand',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: PermissionExpandRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          PermissionExpandRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: PermissionExpandResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          PermissionExpandResponse.deserialize(new Uint8Array(bytes)),
      },
      LookupEntity: {
        path: '/base.v1.Permission/LookupEntity',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: PermissionLookupEntityRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          PermissionLookupEntityRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: PermissionLookupEntityResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          PermissionLookupEntityResponse.deserialize(new Uint8Array(bytes)),
      },
      LookupEntityStream: {
        path: '/base.v1.Permission/LookupEntityStream',
        requestStream: false,
        responseStream: true,
        requestSerialize: (message: PermissionLookupEntityRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          PermissionLookupEntityRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: PermissionLookupEntityStreamResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          PermissionLookupEntityStreamResponse.deserialize(
            new Uint8Array(bytes),
          ),
      },
      LookupSubject: {
        path: '/base.v1.Permission/LookupSubject',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: PermissionLookupSubjectRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          PermissionLookupSubjectRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: PermissionLookupSubjectResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          PermissionLookupSubjectResponse.deserialize(new Uint8Array(bytes)),
      },
      SubjectPermission: {
        path: '/base.v1.Permission/SubjectPermission',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: PermissionSubjectPermissionRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          PermissionSubjectPermissionRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: PermissionSubjectPermissionResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          PermissionSubjectPermissionResponse.deserialize(
            new Uint8Array(bytes),
          ),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Check(
      call: grpc_1.ServerUnaryCall<
        PermissionCheckRequest,
        PermissionCheckResponse
      >,
      callback: grpc_1.sendUnaryData<PermissionCheckResponse>,
    ): void;
    abstract Expand(
      call: grpc_1.ServerUnaryCall<
        PermissionExpandRequest,
        PermissionExpandResponse
      >,
      callback: grpc_1.sendUnaryData<PermissionExpandResponse>,
    ): void;
    abstract LookupEntity(
      call: grpc_1.ServerUnaryCall<
        PermissionLookupEntityRequest,
        PermissionLookupEntityResponse
      >,
      callback: grpc_1.sendUnaryData<PermissionLookupEntityResponse>,
    ): void;
    abstract LookupEntityStream(
      call: grpc_1.ServerWritableStream<
        PermissionLookupEntityRequest,
        PermissionLookupEntityStreamResponse
      >,
    ): void;
    abstract LookupSubject(
      call: grpc_1.ServerUnaryCall<
        PermissionLookupSubjectRequest,
        PermissionLookupSubjectResponse
      >,
      callback: grpc_1.sendUnaryData<PermissionLookupSubjectResponse>,
    ): void;
    abstract SubjectPermission(
      call: grpc_1.ServerUnaryCall<
        PermissionSubjectPermissionRequest,
        PermissionSubjectPermissionResponse
      >,
      callback: grpc_1.sendUnaryData<PermissionSubjectPermissionResponse>,
    ): void;
  }
  export class PermissionClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedPermissionService.definition,
    'Permission',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    Check: GrpcUnaryServiceInterface<
      PermissionCheckRequest,
      PermissionCheckResponse
    > = (
      message: PermissionCheckRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<PermissionCheckResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<PermissionCheckResponse>,
      callback?: grpc_1.requestCallback<PermissionCheckResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Check(message, metadata, options, callback);
    };
    Expand: GrpcUnaryServiceInterface<
      PermissionExpandRequest,
      PermissionExpandResponse
    > = (
      message: PermissionExpandRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<PermissionExpandResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<PermissionExpandResponse>,
      callback?: grpc_1.requestCallback<PermissionExpandResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Expand(message, metadata, options, callback);
    };
    LookupEntity: GrpcUnaryServiceInterface<
      PermissionLookupEntityRequest,
      PermissionLookupEntityResponse
    > = (
      message: PermissionLookupEntityRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<PermissionLookupEntityResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<PermissionLookupEntityResponse>,
      callback?: grpc_1.requestCallback<PermissionLookupEntityResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.LookupEntity(message, metadata, options, callback);
    };
    LookupEntityStream: GrpcStreamServiceInterface<
      PermissionLookupEntityRequest,
      PermissionLookupEntityStreamResponse
    > = (
      message: PermissionLookupEntityRequest,
      metadata?: grpc_1.Metadata | grpc_1.CallOptions,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientReadableStream<PermissionLookupEntityStreamResponse> => {
      return super.LookupEntityStream(message, metadata, options);
    };
    LookupSubject: GrpcUnaryServiceInterface<
      PermissionLookupSubjectRequest,
      PermissionLookupSubjectResponse
    > = (
      message: PermissionLookupSubjectRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<PermissionLookupSubjectResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<PermissionLookupSubjectResponse>,
      callback?: grpc_1.requestCallback<PermissionLookupSubjectResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.LookupSubject(message, metadata, options, callback);
    };
    SubjectPermission: GrpcUnaryServiceInterface<
      PermissionSubjectPermissionRequest,
      PermissionSubjectPermissionResponse
    > = (
      message: PermissionSubjectPermissionRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<PermissionSubjectPermissionResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<PermissionSubjectPermissionResponse>,
      callback?: grpc_1.requestCallback<PermissionSubjectPermissionResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.SubjectPermission(message, metadata, options, callback);
    };
  }
  export abstract class UnimplementedWatchService {
    static definition = {
      Watch: {
        path: '/base.v1.Watch/Watch',
        requestStream: false,
        responseStream: true,
        requestSerialize: (message: WatchRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          WatchRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: WatchResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          WatchResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Watch(
      call: grpc_1.ServerWritableStream<WatchRequest, WatchResponse>,
    ): void;
  }
  export class WatchClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedWatchService.definition,
    'Watch',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    Watch: GrpcStreamServiceInterface<WatchRequest, WatchResponse> = (
      message: WatchRequest,
      metadata?: grpc_1.Metadata | grpc_1.CallOptions,
      options?: grpc_1.CallOptions,
    ): grpc_1.ClientReadableStream<WatchResponse> => {
      return super.Watch(message, metadata, options);
    };
  }
  export abstract class UnimplementedSchemaService {
    static definition = {
      Write: {
        path: '/base.v1.Schema/Write',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: SchemaWriteRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          SchemaWriteRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: SchemaWriteResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          SchemaWriteResponse.deserialize(new Uint8Array(bytes)),
      },
      PartialWrite: {
        path: '/base.v1.Schema/PartialWrite',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: SchemaPartialWriteRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          SchemaPartialWriteRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: SchemaPartialWriteResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          SchemaPartialWriteResponse.deserialize(new Uint8Array(bytes)),
      },
      Read: {
        path: '/base.v1.Schema/Read',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: SchemaReadRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          SchemaReadRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: SchemaReadResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          SchemaReadResponse.deserialize(new Uint8Array(bytes)),
      },
      List: {
        path: '/base.v1.Schema/List',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: SchemaListRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          SchemaListRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: SchemaListResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          SchemaListResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Write(
      call: grpc_1.ServerUnaryCall<SchemaWriteRequest, SchemaWriteResponse>,
      callback: grpc_1.sendUnaryData<SchemaWriteResponse>,
    ): void;
    abstract PartialWrite(
      call: grpc_1.ServerUnaryCall<
        SchemaPartialWriteRequest,
        SchemaPartialWriteResponse
      >,
      callback: grpc_1.sendUnaryData<SchemaPartialWriteResponse>,
    ): void;
    abstract Read(
      call: grpc_1.ServerUnaryCall<SchemaReadRequest, SchemaReadResponse>,
      callback: grpc_1.sendUnaryData<SchemaReadResponse>,
    ): void;
    abstract List(
      call: grpc_1.ServerUnaryCall<SchemaListRequest, SchemaListResponse>,
      callback: grpc_1.sendUnaryData<SchemaListResponse>,
    ): void;
  }
  export class SchemaClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedSchemaService.definition,
    'Schema',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    Write: GrpcUnaryServiceInterface<SchemaWriteRequest, SchemaWriteResponse> =
      (
        message: SchemaWriteRequest,
        metadata:
          | grpc_1.Metadata
          | grpc_1.CallOptions
          | grpc_1.requestCallback<SchemaWriteResponse>,
        options?:
          | grpc_1.CallOptions
          | grpc_1.requestCallback<SchemaWriteResponse>,
        callback?: grpc_1.requestCallback<SchemaWriteResponse>,
      ): grpc_1.ClientUnaryCall => {
        return super.Write(message, metadata, options, callback);
      };
    PartialWrite: GrpcUnaryServiceInterface<
      SchemaPartialWriteRequest,
      SchemaPartialWriteResponse
    > = (
      message: SchemaPartialWriteRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<SchemaPartialWriteResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<SchemaPartialWriteResponse>,
      callback?: grpc_1.requestCallback<SchemaPartialWriteResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.PartialWrite(message, metadata, options, callback);
    };
    Read: GrpcUnaryServiceInterface<SchemaReadRequest, SchemaReadResponse> = (
      message: SchemaReadRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<SchemaReadResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<SchemaReadResponse>,
      callback?: grpc_1.requestCallback<SchemaReadResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Read(message, metadata, options, callback);
    };
    List: GrpcUnaryServiceInterface<SchemaListRequest, SchemaListResponse> = (
      message: SchemaListRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<SchemaListResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<SchemaListResponse>,
      callback?: grpc_1.requestCallback<SchemaListResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.List(message, metadata, options, callback);
    };
  }
  export abstract class UnimplementedDataService {
    static definition = {
      Write: {
        path: '/base.v1.Data/Write',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: DataWriteRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          DataWriteRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: DataWriteResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          DataWriteResponse.deserialize(new Uint8Array(bytes)),
      },
      WriteRelationships: {
        path: '/base.v1.Data/WriteRelationships',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: RelationshipWriteRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          RelationshipWriteRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: RelationshipWriteResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          RelationshipWriteResponse.deserialize(new Uint8Array(bytes)),
      },
      ReadRelationships: {
        path: '/base.v1.Data/ReadRelationships',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: RelationshipReadRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          RelationshipReadRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: RelationshipReadResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          RelationshipReadResponse.deserialize(new Uint8Array(bytes)),
      },
      ReadAttributes: {
        path: '/base.v1.Data/ReadAttributes',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: AttributeReadRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          AttributeReadRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: AttributeReadResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          AttributeReadResponse.deserialize(new Uint8Array(bytes)),
      },
      Delete: {
        path: '/base.v1.Data/Delete',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: DataDeleteRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          DataDeleteRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: DataDeleteResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          DataDeleteResponse.deserialize(new Uint8Array(bytes)),
      },
      DeleteRelationships: {
        path: '/base.v1.Data/DeleteRelationships',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: RelationshipDeleteRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          RelationshipDeleteRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: RelationshipDeleteResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          RelationshipDeleteResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Write(
      call: grpc_1.ServerUnaryCall<DataWriteRequest, DataWriteResponse>,
      callback: grpc_1.sendUnaryData<DataWriteResponse>,
    ): void;
    abstract WriteRelationships(
      call: grpc_1.ServerUnaryCall<
        RelationshipWriteRequest,
        RelationshipWriteResponse
      >,
      callback: grpc_1.sendUnaryData<RelationshipWriteResponse>,
    ): void;
    abstract ReadRelationships(
      call: grpc_1.ServerUnaryCall<
        RelationshipReadRequest,
        RelationshipReadResponse
      >,
      callback: grpc_1.sendUnaryData<RelationshipReadResponse>,
    ): void;
    abstract ReadAttributes(
      call: grpc_1.ServerUnaryCall<AttributeReadRequest, AttributeReadResponse>,
      callback: grpc_1.sendUnaryData<AttributeReadResponse>,
    ): void;
    abstract Delete(
      call: grpc_1.ServerUnaryCall<DataDeleteRequest, DataDeleteResponse>,
      callback: grpc_1.sendUnaryData<DataDeleteResponse>,
    ): void;
    abstract DeleteRelationships(
      call: grpc_1.ServerUnaryCall<
        RelationshipDeleteRequest,
        RelationshipDeleteResponse
      >,
      callback: grpc_1.sendUnaryData<RelationshipDeleteResponse>,
    ): void;
  }
  export class DataClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedDataService.definition,
    'Data',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    Write: GrpcUnaryServiceInterface<DataWriteRequest, DataWriteResponse> = (
      message: DataWriteRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<DataWriteResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<DataWriteResponse>,
      callback?: grpc_1.requestCallback<DataWriteResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Write(message, metadata, options, callback);
    };
    WriteRelationships: GrpcUnaryServiceInterface<
      RelationshipWriteRequest,
      RelationshipWriteResponse
    > = (
      message: RelationshipWriteRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<RelationshipWriteResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<RelationshipWriteResponse>,
      callback?: grpc_1.requestCallback<RelationshipWriteResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.WriteRelationships(message, metadata, options, callback);
    };
    ReadRelationships: GrpcUnaryServiceInterface<
      RelationshipReadRequest,
      RelationshipReadResponse
    > = (
      message: RelationshipReadRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<RelationshipReadResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<RelationshipReadResponse>,
      callback?: grpc_1.requestCallback<RelationshipReadResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.ReadRelationships(message, metadata, options, callback);
    };
    ReadAttributes: GrpcUnaryServiceInterface<
      AttributeReadRequest,
      AttributeReadResponse
    > = (
      message: AttributeReadRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<AttributeReadResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<AttributeReadResponse>,
      callback?: grpc_1.requestCallback<AttributeReadResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.ReadAttributes(message, metadata, options, callback);
    };
    Delete: GrpcUnaryServiceInterface<DataDeleteRequest, DataDeleteResponse> = (
      message: DataDeleteRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<DataDeleteResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<DataDeleteResponse>,
      callback?: grpc_1.requestCallback<DataDeleteResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Delete(message, metadata, options, callback);
    };
    DeleteRelationships: GrpcUnaryServiceInterface<
      RelationshipDeleteRequest,
      RelationshipDeleteResponse
    > = (
      message: RelationshipDeleteRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<RelationshipDeleteResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<RelationshipDeleteResponse>,
      callback?: grpc_1.requestCallback<RelationshipDeleteResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.DeleteRelationships(message, metadata, options, callback);
    };
  }
  export abstract class UnimplementedBundleService {
    static definition = {
      Write: {
        path: '/base.v1.Bundle/Write',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: BundleWriteRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          BundleWriteRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: BundleWriteResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          BundleWriteResponse.deserialize(new Uint8Array(bytes)),
      },
      Read: {
        path: '/base.v1.Bundle/Read',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: BundleReadRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          BundleReadRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: BundleReadResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          BundleReadResponse.deserialize(new Uint8Array(bytes)),
      },
      Delete: {
        path: '/base.v1.Bundle/Delete',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: BundleDeleteRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          BundleDeleteRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: BundleDeleteResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          BundleDeleteResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Write(
      call: grpc_1.ServerUnaryCall<BundleWriteRequest, BundleWriteResponse>,
      callback: grpc_1.sendUnaryData<BundleWriteResponse>,
    ): void;
    abstract Read(
      call: grpc_1.ServerUnaryCall<BundleReadRequest, BundleReadResponse>,
      callback: grpc_1.sendUnaryData<BundleReadResponse>,
    ): void;
    abstract Delete(
      call: grpc_1.ServerUnaryCall<BundleDeleteRequest, BundleDeleteResponse>,
      callback: grpc_1.sendUnaryData<BundleDeleteResponse>,
    ): void;
  }
  export class BundleClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedBundleService.definition,
    'Bundle',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    Write: GrpcUnaryServiceInterface<BundleWriteRequest, BundleWriteResponse> =
      (
        message: BundleWriteRequest,
        metadata:
          | grpc_1.Metadata
          | grpc_1.CallOptions
          | grpc_1.requestCallback<BundleWriteResponse>,
        options?:
          | grpc_1.CallOptions
          | grpc_1.requestCallback<BundleWriteResponse>,
        callback?: grpc_1.requestCallback<BundleWriteResponse>,
      ): grpc_1.ClientUnaryCall => {
        return super.Write(message, metadata, options, callback);
      };
    Read: GrpcUnaryServiceInterface<BundleReadRequest, BundleReadResponse> = (
      message: BundleReadRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<BundleReadResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<BundleReadResponse>,
      callback?: grpc_1.requestCallback<BundleReadResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Read(message, metadata, options, callback);
    };
    Delete: GrpcUnaryServiceInterface<
      BundleDeleteRequest,
      BundleDeleteResponse
    > = (
      message: BundleDeleteRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<BundleDeleteResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<BundleDeleteResponse>,
      callback?: grpc_1.requestCallback<BundleDeleteResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Delete(message, metadata, options, callback);
    };
  }
  export abstract class UnimplementedTenancyService {
    static definition = {
      Create: {
        path: '/base.v1.Tenancy/Create',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: TenantCreateRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          TenantCreateRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: TenantCreateResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          TenantCreateResponse.deserialize(new Uint8Array(bytes)),
      },
      Delete: {
        path: '/base.v1.Tenancy/Delete',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: TenantDeleteRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          TenantDeleteRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: TenantDeleteResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          TenantDeleteResponse.deserialize(new Uint8Array(bytes)),
      },
      List: {
        path: '/base.v1.Tenancy/List',
        requestStream: false,
        responseStream: false,
        requestSerialize: (message: TenantListRequest) =>
          Buffer.from(message.serialize()),
        requestDeserialize: (bytes: Buffer) =>
          TenantListRequest.deserialize(new Uint8Array(bytes)),
        responseSerialize: (message: TenantListResponse) =>
          Buffer.from(message.serialize()),
        responseDeserialize: (bytes: Buffer) =>
          TenantListResponse.deserialize(new Uint8Array(bytes)),
      },
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Create(
      call: grpc_1.ServerUnaryCall<TenantCreateRequest, TenantCreateResponse>,
      callback: grpc_1.sendUnaryData<TenantCreateResponse>,
    ): void;
    abstract Delete(
      call: grpc_1.ServerUnaryCall<TenantDeleteRequest, TenantDeleteResponse>,
      callback: grpc_1.sendUnaryData<TenantDeleteResponse>,
    ): void;
    abstract List(
      call: grpc_1.ServerUnaryCall<TenantListRequest, TenantListResponse>,
      callback: grpc_1.sendUnaryData<TenantListResponse>,
    ): void;
  }
  export class TenancyClient extends grpc_1.makeGenericClientConstructor(
    UnimplementedTenancyService.definition,
    'Tenancy',
    {},
  ) {
    constructor(
      address: string,
      credentials: grpc_1.ChannelCredentials,
      options?: Partial<grpc_1.ChannelOptions>,
    ) {
      super(address, credentials, options);
    }
    Create: GrpcUnaryServiceInterface<
      TenantCreateRequest,
      TenantCreateResponse
    > = (
      message: TenantCreateRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<TenantCreateResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<TenantCreateResponse>,
      callback?: grpc_1.requestCallback<TenantCreateResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Create(message, metadata, options, callback);
    };
    Delete: GrpcUnaryServiceInterface<
      TenantDeleteRequest,
      TenantDeleteResponse
    > = (
      message: TenantDeleteRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<TenantDeleteResponse>,
      options?:
        | grpc_1.CallOptions
        | grpc_1.requestCallback<TenantDeleteResponse>,
      callback?: grpc_1.requestCallback<TenantDeleteResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.Delete(message, metadata, options, callback);
    };
    List: GrpcUnaryServiceInterface<TenantListRequest, TenantListResponse> = (
      message: TenantListRequest,
      metadata:
        | grpc_1.Metadata
        | grpc_1.CallOptions
        | grpc_1.requestCallback<TenantListResponse>,
      options?: grpc_1.CallOptions | grpc_1.requestCallback<TenantListResponse>,
      callback?: grpc_1.requestCallback<TenantListResponse>,
    ): grpc_1.ClientUnaryCall => {
      return super.List(message, metadata, options, callback);
    };
  }
}
