// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(dbgenerated("public.uuid_generate_v4()"))
  password        String
  lastLogin       DateTime?        @default(now())
  isSuperUser     Boolean          @default(false)
  username        String           @unique
  firstName       String
  lastName        String
  email           String           @unique
  isStaff         Boolean          @default(false)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  usersPermissions UserPermission[]
  usersGroups       UserGroup[]
  adminLogs        AdminLog[]
  messages         Message[]
  usersChatRooms    UserChatRoom[]
  reactions        Reaction[]
  posts            Post[]
  comments         Comment[]
  shares           Share[]
}

model UserPermission {
  id           String     @id @default(dbgenerated("public.uuid_generate_v4()"))
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  permissionId String
}

model UserGroup {
  id        String   @id @default(dbgenerated("public.uuid_generate_v4()"))
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  groupId   String
}


model Group {
  id              String            @id @default(dbgenerated("public.uuid_generate_v4()"))
  name            String            @unique
  permissions     Permission[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  groupsPermissions GroupPermission[]
  usersGroups       UserGroup[]
}

model GroupPermission {
  id           String     @id @default(dbgenerated("public.uuid_generate_v4()"))
  group        Group      @relation(fields: [groupId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  groupId      String
  permissionId String
}

model Permission {
  id              String            @id @default(dbgenerated("public.uuid_generate_v4()"))
  name            String            @unique
  codename        String            @unique
  contentTypeId   String?
  contentType     ContentType?      @relation(fields: [contentTypeId], references: [id])
  groups          Group[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  usersPermissions  UserPermission[]
  groupsPermissions GroupPermission[]
}

model ContentType {
  id         String       @id @default(dbgenerated("public.uuid_generate_v4()"))
  appLabel   String
  model      String
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  permissions Permission[]
  adminLogs   AdminLog[]
}

model AdminLog {
  id            String      @id @default(dbgenerated("public.uuid_generate_v4()"))
  action        String
  objectId      String
  objectRepr    String
  changeMessage String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id])
  contentTypeId String
}

model Session {
  id          String   @id @default(dbgenerated("public.uuid_generate_v4()"))
  sessionKey  String   @unique
  sessionData String
  expireDate  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id          String       @id @default(dbgenerated("public.uuid_generate_v4()"))
  content     String
  senderId    String
  chatRoomId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sender      User         @relation(fields: [senderId], references: [id])
  chatRoom    ChatRoom     @relation(fields: [chatRoomId], references: [id])
  attachments Attachment[]
  reactions   Reaction[]
}

model ChatRoom {
  id        String         @id @default(dbgenerated("public.uuid_generate_v4()"))
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  messages  Message[]
  usersChatRooms     UserChatRoom[]
}

model UserChatRoom {
  userId     String
  chatRoomId String
  user       User     @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])

  @@id([userId, chatRoomId])
}

model Attachment {
  id        String   @id @default(dbgenerated("public.uuid_generate_v4()"))
  file      String
  messageId String?
  postId    String?
  commentId String?
  message   Message? @relation(fields: [messageId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id        String  @id @default(dbgenerated("public.uuid_generate_v4()"))
  type      String
  userId    String
  messageId String?
  postId    String?
  commentId String?
  user      User    @relation(fields: [userId], references: [id])
  message   Message? @relation(fields: [messageId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
}

model Post {
  id         String       @id @default(dbgenerated("public.uuid_generate_v4()"))
  content    String
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  comments   Comment[]
  reactions      Reaction[]
  shares     Share[]
  attachments Attachment[]
}

model Comment {
  id         String       @id @default(dbgenerated("public.uuid_generate_v4()"))
  content    String
  userId     String
  postId     String
  user       User         @relation(fields: [userId], references: [id])
  post       Post         @relation(fields: [postId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  reactions      Reaction[]
  attachments Attachment[]
}

model Share {
  id        String   @id @default(dbgenerated("public.uuid_generate_v4()"))
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}
