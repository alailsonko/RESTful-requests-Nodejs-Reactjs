// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(dbgenerated("public.uuid_generate_v4()"))
  password        String
  lastLogin       DateTime?        @default(now())
  isSuperUser     Boolean          @default(false)
  username        String           @unique
  firstName       String
  lastName        String
  email           String           @unique
  isStaff         Boolean          @default(false)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userPermissions UserPermission[]
  UserGroup       UserGroup[]
  AdminLog        AdminLog[]
}

model UserPermission {
  id           String     @id @default(dbgenerated("public.uuid_generate_v4()"))
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  permissionId String
}

model GroupPermission {
  id           String     @id @default(dbgenerated("public.uuid_generate_v4()"))
  group        Group      @relation(fields: [groupId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  groupId      String
  permissionId String
}

model UserGroup {
  id        String   @id @default(dbgenerated("public.uuid_generate_v4()"))
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  groupId   String
}

model Group {
  id              String            @id @default(dbgenerated("public.uuid_generate_v4()"))
  name            String            @unique
  permissions     Permission[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  GroupPermission GroupPermission[]
  UserGroup       UserGroup[]
}

model Permission {
  id              String            @id @default(dbgenerated("public.uuid_generate_v4()"))
  name            String            @unique
  codename        String            @unique
  contentTypes    ContentType[]
  groups          Group[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UserPermission  UserPermission[]
  GroupPermission GroupPermission[]
}

model ContentType {
  id           String      @id @default(dbgenerated("public.uuid_generate_v4()"))
  appLabel     String
  model        String
  name         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Permission   Permission? @relation(fields: [permissionId], references: [id])
  permissionId String?
  AdminLog     AdminLog[]
}

model AdminLog {
  id            String      @id @default(dbgenerated("public.uuid_generate_v4()"))
  action        String
  objectId      String
  objectRepr    String
  changeMessage String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  contentType   ContentType @relation(fields: [contentTypeId], references: [id])
  contentTypeId String
}

model Session {
  id          String   @id @default(dbgenerated("public.uuid_generate_v4()"))
  sessionKey  String   @unique
  sessionData String
  expireDate  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
